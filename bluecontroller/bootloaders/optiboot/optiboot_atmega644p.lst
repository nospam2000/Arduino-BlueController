
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  0000fc00  0000fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005f  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000026d  00000000  00000000  000002a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018e  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000433  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000133  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000241  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <main>:
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    fc00:	11 24       	eor	r1, r1
#endif

  uint8_t ch;

  // Adaboot no-wait mod
  ch = MCUSR;
    fc02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    fc04:	14 be       	out	0x34, r1	; 52
  else
  {
    appStart();
  }
#else
    if (!(ch & _BV(EXTRF)))
    fc06:	81 ff       	sbrs	r24, 1
      appStart();
    fc08:	cc d0       	rcall	.+408    	; 0xfda2 <appStart>
#endif

  // Set up watchdog to trigger after 1000 ms
  watchdogConfig(WATCHDOG_1S);
    fc0a:	8e e0       	ldi	r24, 0x0E	; 14
    fc0c:	c4 d0       	rcall	.+392    	; 0xfd96 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    fc0e:	85 e0       	ldi	r24, 0x05	; 5
    fc10:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    fc14:	82 e0       	ldi	r24, 0x02	; 2
    fc16:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    fc1a:	88 e1       	ldi	r24, 0x18	; 24
    fc1c:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    fc20:	86 e0       	ldi	r24, 0x06	; 6
    fc22:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    fc26:	80 e1       	ldi	r24, 0x10	; 16
    fc28:	80 93 c4 00 	sts	0x00C4, r24
  UART_DDR |= _BV(UART_TX_BIT);
#endif

#if !defined(BLUECONTROLLER) 
  /* Set LED pin as output */
  LED_DDR |= LED_DDR_VAL;
    fc2c:	20 9a       	sbi	0x04, 0	; 4
    fc2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc30:	20 e3       	ldi	r18, 0x30	; 48
    fc32:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    fc34:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc36:	30 93 85 00 	sts	0x0085, r19
    fc3a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    fc3e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    fc40:	b0 9b       	sbis	0x16, 0	; 22
    fc42:	fe cf       	rjmp	.-4      	; 0xfc40 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    fc44:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fc46:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    fc48:	81 50       	subi	r24, 0x01	; 1
    fc4a:	a9 f7       	brne	.-22     	; 0xfc36 <main+0x36>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    fc4c:	99 24       	eor	r9, r9
    fc4e:	93 94       	inc	r9
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fc50:	b5 e0       	ldi	r27, 0x05	; 5
    fc52:	bb 2e       	mov	r11, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fc54:	a1 e1       	ldi	r26, 0x11	; 17
    fc56:	aa 2e       	mov	r10, r26
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc58:	96 d0       	rcall	.+300    	; 0xfd86 <getch>
      verifySpace();
      blueCAvrdudeSynced = 1;
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
    fc5a:	81 34       	cpi	r24, 0x41	; 65
    fc5c:	21 f4       	brne	.+8      	; 0xfc66 <main+0x66>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    fc5e:	81 e0       	ldi	r24, 0x01	; 1
    fc60:	ad d0       	rcall	.+346    	; 0xfdbc <getNch>
      putch(0x03);
    fc62:	83 e0       	ldi	r24, 0x03	; 3
    fc64:	1c c0       	rjmp	.+56     	; 0xfc9e <main+0x9e>
    }
    else if(ch == STK_SET_DEVICE) {
    fc66:	82 34       	cpi	r24, 0x42	; 66
    fc68:	11 f4       	brne	.+4      	; 0xfc6e <main+0x6e>
      // SET DEVICE is ignored
      getNch(20);
    fc6a:	84 e1       	ldi	r24, 0x14	; 20
    fc6c:	03 c0       	rjmp	.+6      	; 0xfc74 <main+0x74>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fc6e:	85 34       	cpi	r24, 0x45	; 69
    fc70:	19 f4       	brne	.+6      	; 0xfc78 <main+0x78>
      // SET DEVICE EXT is ignored
      getNch(5);
    fc72:	85 e0       	ldi	r24, 0x05	; 5
    fc74:	a3 d0       	rcall	.+326    	; 0xfdbc <getNch>
    fc76:	7c c0       	rjmp	.+248    	; 0xfd70 <main+0x170>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fc78:	85 35       	cpi	r24, 0x55	; 85
    fc7a:	61 f4       	brne	.+24     	; 0xfc94 <main+0x94>
      // LOAD ADDRESS
      address = getch();
    fc7c:	84 d0       	rcall	.+264    	; 0xfd86 <getch>
      address = (address & 0xff) | (getch() << 8);
    fc7e:	08 2f       	mov	r16, r24
    fc80:	10 e0       	ldi	r17, 0x00	; 0
    fc82:	81 d0       	rcall	.+258    	; 0xfd86 <getch>
    fc84:	90 e0       	ldi	r25, 0x00	; 0
    fc86:	d8 2e       	mov	r13, r24
    fc88:	cc 24       	eor	r12, r12
    fc8a:	c0 2a       	or	r12, r16
    fc8c:	d1 2a       	or	r13, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
#endif
      address += address; // Convert from word address to byte address
    fc8e:	cc 0c       	add	r12, r12
    fc90:	dd 1c       	adc	r13, r13
    fc92:	6d c0       	rjmp	.+218    	; 0xfd6e <main+0x16e>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    fc94:	86 35       	cpi	r24, 0x56	; 86
    fc96:	29 f4       	brne	.+10     	; 0xfca2 <main+0xa2>
      // UNIVERSAL command is ignored
      getNch(4);
    fc98:	84 e0       	ldi	r24, 0x04	; 4
    fc9a:	90 d0       	rcall	.+288    	; 0xfdbc <getNch>
      putch(0x00);
    fc9c:	80 e0       	ldi	r24, 0x00	; 0
    fc9e:	6b d0       	rcall	.+214    	; 0xfd76 <putch>
    fca0:	67 c0       	rjmp	.+206    	; 0xfd70 <main+0x170>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    fca2:	84 36       	cpi	r24, 0x64	; 100
    fca4:	09 f0       	breq	.+2      	; 0xfca8 <main+0xa8>
    fca6:	3e c0       	rjmp	.+124    	; 0xfd24 <main+0x124>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    fca8:	6e d0       	rcall	.+220    	; 0xfd86 <getch>
      length = getch();
    fcaa:	6d d0       	rcall	.+218    	; 0xfd86 <getch>
    fcac:	08 2f       	mov	r16, r24
      getch();
    fcae:	6b d0       	rcall	.+214    	; 0xfd86 <getch>

      // If we are in RWW section, immediately start page erase
#if !defined(NRWWSECTIONFAVORSIZE) 
      if ((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8))
    fcb0:	8d 2d       	mov	r24, r13
    fcb2:	99 27       	eor	r25, r25
    fcb4:	18 2f       	mov	r17, r24
    fcb6:	80 3e       	cpi	r24, 0xE0	; 224
    fcb8:	20 f4       	brcc	.+8      	; 0xfcc2 <main+0xc2>
        __boot_page_erase_short((uint16_t)(void*)address);
    fcba:	83 e0       	ldi	r24, 0x03	; 3
    fcbc:	f6 01       	movw	r30, r12
    fcbe:	87 bf       	out	0x37, r24	; 55
    fcc0:	e8 95       	spm
    fcc2:	c2 e0       	ldi	r28, 0x02	; 2
    fcc4:	d1 e0       	ldi	r29, 0x01	; 1
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    fcc6:	5f d0       	rcall	.+190    	; 0xfd86 <getch>
    fcc8:	89 93       	st	Y+, r24
      while (--length);
    fcca:	01 50       	subi	r16, 0x01	; 1
    fccc:	e1 f7       	brne	.-8      	; 0xfcc6 <main+0xc6>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(NRWWSECTIONFAVORSIZE) 
      if (!((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8)))
    fcce:	10 3e       	cpi	r17, 0xE0	; 224
    fcd0:	20 f0       	brcs	.+8      	; 0xfcda <main+0xda>
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    fcd2:	83 e0       	ldi	r24, 0x03	; 3
    fcd4:	f6 01       	movw	r30, r12
    fcd6:	87 bf       	out	0x37, r24	; 55
    fcd8:	e8 95       	spm
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    fcda:	07 b6       	in	r0, 0x37	; 55
    fcdc:	00 fc       	sbrc	r0, 0
    fcde:	fd cf       	rjmp	.-6      	; 0xfcda <main+0xda>
    fce0:	a6 01       	movw	r20, r12
    fce2:	a2 e0       	ldi	r26, 0x02	; 2
    fce4:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    fce6:	2c 91       	ld	r18, X
    fce8:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    fcea:	11 96       	adiw	r26, 0x01	; 1
    fcec:	8c 91       	ld	r24, X
    fcee:	11 97       	sbiw	r26, 0x01	; 1
    fcf0:	90 e0       	ldi	r25, 0x00	; 0
    fcf2:	98 2f       	mov	r25, r24
    fcf4:	88 27       	eor	r24, r24
    fcf6:	82 2b       	or	r24, r18
    fcf8:	93 2b       	or	r25, r19
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    fcfa:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    fcfc:	fa 01       	movw	r30, r20
    fcfe:	0c 01       	movw	r0, r24
    fd00:	97 be       	out	0x37, r9	; 55
    fd02:	e8 95       	spm
    fd04:	11 24       	eor	r1, r1
        addrPtr += 2;
    fd06:	4e 5f       	subi	r20, 0xFE	; 254
    fd08:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    fd0a:	f2 e0       	ldi	r31, 0x02	; 2
    fd0c:	a2 30       	cpi	r26, 0x02	; 2
    fd0e:	bf 07       	cpc	r27, r31
    fd10:	51 f7       	brne	.-44     	; 0xfce6 <main+0xe6>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fd12:	f6 01       	movw	r30, r12
    fd14:	b7 be       	out	0x37, r11	; 55
    fd16:	e8 95       	spm
      boot_spm_busy_wait();
    fd18:	07 b6       	in	r0, 0x37	; 55
    fd1a:	00 fc       	sbrc	r0, 0
    fd1c:	fd cf       	rjmp	.-6      	; 0xfd18 <main+0x118>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fd1e:	a7 be       	out	0x37, r10	; 55
    fd20:	e8 95       	spm
    fd22:	25 c0       	rjmp	.+74     	; 0xfd6e <main+0x16e>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    fd24:	84 37       	cpi	r24, 0x74	; 116
    fd26:	b1 f4       	brne	.+44     	; 0xfd54 <main+0x154>
      // READ PAGE - we only read flash

      getch();			/* getlen */
    fd28:	2e d0       	rcall	.+92     	; 0xfd86 <getch>
      length = getch();
    fd2a:	2d d0       	rcall	.+90     	; 0xfd86 <getch>
    fd2c:	e8 2e       	mov	r14, r24
      getch();
    fd2e:	2b d0       	rcall	.+86     	; 0xfd86 <getch>

      verifySpace();
    fd30:	3f d0       	rcall	.+126    	; 0xfdb0 <verifySpace>
    fd32:	f6 01       	movw	r30, r12
    fd34:	fe 2c       	mov	r15, r14
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    fd36:	8f 01       	movw	r16, r30
    fd38:	0f 5f       	subi	r16, 0xFF	; 255
    fd3a:	1f 4f       	sbci	r17, 0xFF	; 255
    fd3c:	84 91       	lpm	r24, Z+
    fd3e:	1b d0       	rcall	.+54     	; 0xfd76 <putch>
      while (--length);
    fd40:	fa 94       	dec	r15
    fd42:	f8 01       	movw	r30, r16
    fd44:	c1 f7       	brne	.-16     	; 0xfd36 <main+0x136>
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    fd46:	08 94       	sec
    fd48:	c1 1c       	adc	r12, r1
    fd4a:	d1 1c       	adc	r13, r1
    fd4c:	ea 94       	dec	r14
    fd4e:	ce 0c       	add	r12, r14
    fd50:	d1 1c       	adc	r13, r1
    fd52:	0e c0       	rjmp	.+28     	; 0xfd70 <main+0x170>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    fd54:	85 37       	cpi	r24, 0x75	; 117
    fd56:	39 f4       	brne	.+14     	; 0xfd66 <main+0x166>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fd58:	2b d0       	rcall	.+86     	; 0xfdb0 <verifySpace>
      putch(SIGNATURE_0);
    fd5a:	8e e1       	ldi	r24, 0x1E	; 30
    fd5c:	0c d0       	rcall	.+24     	; 0xfd76 <putch>
      putch(SIGNATURE_1);
    fd5e:	86 e9       	ldi	r24, 0x96	; 150
    fd60:	0a d0       	rcall	.+20     	; 0xfd76 <putch>
      putch(SIGNATURE_2);
    fd62:	89 e0       	ldi	r24, 0x09	; 9
    fd64:	9c cf       	rjmp	.-200    	; 0xfc9e <main+0x9e>
    }
    else if (ch == 'Q') {
    fd66:	81 35       	cpi	r24, 0x51	; 81
    fd68:	11 f4       	brne	.+4      	; 0xfd6e <main+0x16e>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_64MS); // 16ms is not enough to send the result back to avrdude
    fd6a:	8a e0       	ldi	r24, 0x0A	; 10
    fd6c:	14 d0       	rcall	.+40     	; 0xfd96 <watchdogConfig>
      verifySpace(); // fall through to the "else" clause, saves 4 bytes
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fd6e:	20 d0       	rcall	.+64     	; 0xfdb0 <verifySpace>
    }
    putch(STK_OK);
    fd70:	80 e1       	ldi	r24, 0x10	; 16
    fd72:	01 d0       	rcall	.+2      	; 0xfd76 <putch>
    fd74:	71 cf       	rjmp	.-286    	; 0xfc58 <main+0x58>

0000fd76 <putch>:
  }
}

void putch(char ch) {
    fd76:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    fd78:	80 91 c0 00 	lds	r24, 0x00C0
    fd7c:	85 ff       	sbrs	r24, 5
    fd7e:	fc cf       	rjmp	.-8      	; 0xfd78 <putch+0x2>
  UDR0 = ch;
    fd80:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fd84:	08 95       	ret

0000fd86 <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fd86:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    fd88:	80 91 c0 00 	lds	r24, 0x00C0
    fd8c:	87 ff       	sbrs	r24, 7
    fd8e:	fc cf       	rjmp	.-8      	; 0xfd88 <getch+0x2>
#if defined(BLUECONTROLLER) 
    extendWatchdogPeriodAfterStartup();
#endif
  }

  ch = UDR0;
    fd90:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fd94:	08 95       	ret

0000fd96 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fd96:	e0 e6       	ldi	r30, 0x60	; 96
    fd98:	f0 e0       	ldi	r31, 0x00	; 0
    fd9a:	98 e1       	ldi	r25, 0x18	; 24
    fd9c:	90 83       	st	Z, r25
  WDTCSR = x;
    fd9e:	80 83       	st	Z, r24
}
    fda0:	08 95       	ret

0000fda2 <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
    fda2:	20 9a       	sbi	0x04, 0	; 4
  LED_PORT &= ~_BV(LED); // switch LED off
    fda4:	28 98       	cbi	0x05, 0	; 5
  watchdogConfig(WATCHDOG_OFF);
    fda6:	80 e0       	ldi	r24, 0x00	; 0
    fda8:	f6 df       	rcall	.-20     	; 0xfd96 <watchdogConfig>
  __asm__ __volatile__ (
    fdaa:	ee 27       	eor	r30, r30
    fdac:	ff 27       	eor	r31, r31
    fdae:	09 94       	ijmp

0000fdb0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
    fdb0:	ea df       	rcall	.-44     	; 0xfd86 <getch>
    fdb2:	80 32       	cpi	r24, 0x20	; 32
    fdb4:	11 f4       	brne	.+4      	; 0xfdba <verifySpace+0xa>
  {
    putch(STK_INSYNC);
    fdb6:	84 e1       	ldi	r24, 0x14	; 20
    fdb8:	de cf       	rjmp	.-68     	; 0xfd76 <putch>
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage will exit the bootloader
    if(blueCAvrdudeSynced)
      appStart();
#else
    appStart();
    fdba:	f3 cf       	rjmp	.-26     	; 0xfda2 <appStart>

0000fdbc <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fdbc:	1f 93       	push	r17
    fdbe:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    fdc0:	e2 df       	rcall	.-60     	; 0xfd86 <getch>
    fdc2:	11 50       	subi	r17, 0x01	; 1
    fdc4:	e9 f7       	brne	.-6      	; 0xfdc0 <getNch+0x4>
  verifySpace();
    fdc6:	f4 df       	rcall	.-24     	; 0xfdb0 <verifySpace>
}
    fdc8:	1f 91       	pop	r17
    fdca:	08 95       	ret
