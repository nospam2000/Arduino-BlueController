
optiboot_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00001e00  00001e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005f  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000027e  00000000  00000000  000002a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000157  00000000  00000000  00000523  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000045e  00000000  00000000  0000067a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000133  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000223  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <main>:
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    1e00:	11 24       	eor	r1, r1
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
    1e02:	8f e5       	ldi	r24, 0x5F	; 95
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	9e bf       	out	0x3e, r25	; 62
    1e08:	8d bf       	out	0x3d, r24	; 61
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    1e0a:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    1e0c:	14 be       	out	0x34, r1	; 52
  else
  {
    appStart();
  }
#else
    if (!(ch & _BV(EXTRF))) appStart();
    1e0e:	81 ff       	sbrs	r24, 1
    1e10:	c7 d0       	rcall	.+398    	; 0x1fa0 <appStart>
#endif

  // Set up watchdog to trigger after 1000 ms
  watchdogConfig(WATCHDOG_1S);
    1e12:	8e e0       	ldi	r24, 0x0E	; 14
    1e14:	c1 d0       	rcall	.+386    	; 0x1f98 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1e16:	85 e0       	ldi	r24, 0x05	; 5
    1e18:	8e bd       	out	0x2e, r24	; 46
#endif
#ifndef SOFT_UART

#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  UCSRA = _BV(U2X); //Double speed mode USART
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	8b b9       	out	0x0b, r24	; 11
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    1e1e:	88 e1       	ldi	r24, 0x18	; 24
    1e20:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    1e22:	86 e8       	ldi	r24, 0x86	; 134
    1e24:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    1e26:	80 e1       	ldi	r24, 0x10	; 16
    1e28:	89 b9       	out	0x09, r24	; 9
#endif
#endif

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1e2a:	bd 9a       	sbi	0x17, 5	; 23
    1e2c:	96 e0       	ldi	r25, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e2e:	20 e3       	ldi	r18, 0x30	; 48
    1e30:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    1e32:	54 e0       	ldi	r21, 0x04	; 4
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    1e34:	40 e2       	ldi	r20, 0x20	; 32
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e36:	3d bd       	out	0x2d, r19	; 45
    1e38:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
    1e3a:	58 bf       	out	0x38, r21	; 56
    while(!(TIFR1 & _BV(TOV1)));
    1e3c:	08 b6       	in	r0, 0x38	; 56
    1e3e:	02 fe       	sbrs	r0, 2
    1e40:	fd cf       	rjmp	.-6      	; 0x1e3c <main+0x3c>
#if defined(__AVR_ATmega8__)  || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    1e42:	88 b3       	in	r24, 0x18	; 24
    1e44:	84 27       	eor	r24, r20
    1e46:	88 bb       	out	0x18, r24	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1e48:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    1e4a:	91 50       	subi	r25, 0x01	; 1
    1e4c:	a1 f7       	brne	.-24     	; 0x1e36 <main+0x36>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    1e4e:	99 24       	eor	r9, r9
    1e50:	93 94       	inc	r9
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1e52:	b5 e0       	ldi	r27, 0x05	; 5
    1e54:	bb 2e       	mov	r11, r27
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    1e56:	a1 e1       	ldi	r26, 0x11	; 17
    1e58:	aa 2e       	mov	r10, r26
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e5a:	96 d0       	rcall	.+300    	; 0x1f88 <getch>
      verifySpace();
      blueCAvrdudeSynced = 1;
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
    1e5c:	81 34       	cpi	r24, 0x41	; 65
    1e5e:	21 f4       	brne	.+8      	; 0x1e68 <main+0x68>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	ab d0       	rcall	.+342    	; 0x1fba <getNch>
      putch(0x03);
    1e64:	83 e0       	ldi	r24, 0x03	; 3
    1e66:	1c c0       	rjmp	.+56     	; 0x1ea0 <main+0xa0>
    }
    else if(ch == STK_SET_DEVICE) {
    1e68:	82 34       	cpi	r24, 0x42	; 66
    1e6a:	11 f4       	brne	.+4      	; 0x1e70 <main+0x70>
      // SET DEVICE is ignored
      getNch(20);
    1e6c:	84 e1       	ldi	r24, 0x14	; 20
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <main+0x76>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1e70:	85 34       	cpi	r24, 0x45	; 69
    1e72:	19 f4       	brne	.+6      	; 0x1e7a <main+0x7a>
      // SET DEVICE EXT is ignored
      getNch(5);
    1e74:	85 e0       	ldi	r24, 0x05	; 5
    1e76:	a1 d0       	rcall	.+322    	; 0x1fba <getNch>
    1e78:	80 c0       	rjmp	.+256    	; 0x1f7a <main+0x17a>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1e7a:	85 35       	cpi	r24, 0x55	; 85
    1e7c:	61 f4       	brne	.+24     	; 0x1e96 <main+0x96>
      // LOAD ADDRESS
      address = getch();
    1e7e:	84 d0       	rcall	.+264    	; 0x1f88 <getch>
      address = (address & 0xff) | (getch() << 8);
    1e80:	08 2f       	mov	r16, r24
    1e82:	10 e0       	ldi	r17, 0x00	; 0
    1e84:	81 d0       	rcall	.+258    	; 0x1f88 <getch>
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	d8 2e       	mov	r13, r24
    1e8a:	cc 24       	eor	r12, r12
    1e8c:	c0 2a       	or	r12, r16
    1e8e:	d1 2a       	or	r13, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
#endif
      address += address; // Convert from word address to byte address
    1e90:	cc 0c       	add	r12, r12
    1e92:	dd 1c       	adc	r13, r13
    1e94:	71 c0       	rjmp	.+226    	; 0x1f78 <main+0x178>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    1e96:	86 35       	cpi	r24, 0x56	; 86
    1e98:	29 f4       	brne	.+10     	; 0x1ea4 <main+0xa4>
      // UNIVERSAL command is ignored
      getNch(4);
    1e9a:	84 e0       	ldi	r24, 0x04	; 4
    1e9c:	8e d0       	rcall	.+284    	; 0x1fba <getNch>
      putch(0x00);
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	6f d0       	rcall	.+222    	; 0x1f80 <putch>
    1ea2:	6b c0       	rjmp	.+214    	; 0x1f7a <main+0x17a>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1ea4:	84 36       	cpi	r24, 0x64	; 100
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <main+0xaa>
    1ea8:	3e c0       	rjmp	.+124    	; 0x1f26 <main+0x126>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    1eaa:	6e d0       	rcall	.+220    	; 0x1f88 <getch>
      length = getch();
    1eac:	6d d0       	rcall	.+218    	; 0x1f88 <getch>
    1eae:	08 2f       	mov	r16, r24
      getch();
    1eb0:	6b d0       	rcall	.+214    	; 0x1f88 <getch>

      // If we are in RWW section, immediately start page erase
#if !defined(NRWWSECTIONFAVORSIZE) 
      if ((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8))
    1eb2:	8d 2d       	mov	r24, r13
    1eb4:	99 27       	eor	r25, r25
    1eb6:	18 2f       	mov	r17, r24
    1eb8:	88 31       	cpi	r24, 0x18	; 24
    1eba:	20 f4       	brcc	.+8      	; 0x1ec4 <main+0xc4>
        __boot_page_erase_short((uint16_t)(void*)address);
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	87 bf       	out	0x37, r24	; 55
    1ec2:	e8 95       	spm
    1ec4:	c2 e0       	ldi	r28, 0x02	; 2
    1ec6:	d1 e0       	ldi	r29, 0x01	; 1
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1ec8:	5f d0       	rcall	.+190    	; 0x1f88 <getch>
    1eca:	89 93       	st	Y+, r24
      while (--length);
    1ecc:	01 50       	subi	r16, 0x01	; 1
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <main+0xc8>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(NRWWSECTIONFAVORSIZE) 
      if (!((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8)))
    1ed0:	18 31       	cpi	r17, 0x18	; 24
    1ed2:	20 f0       	brcs	.+8      	; 0x1edc <main+0xdc>
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	f6 01       	movw	r30, r12
    1ed8:	87 bf       	out	0x37, r24	; 55
    1eda:	e8 95       	spm
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    1edc:	07 b6       	in	r0, 0x37	; 55
    1ede:	00 fc       	sbrc	r0, 0
    1ee0:	fd cf       	rjmp	.-6      	; 0x1edc <main+0xdc>
    1ee2:	a6 01       	movw	r20, r12
    1ee4:	a2 e0       	ldi	r26, 0x02	; 2
    1ee6:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    1ee8:	2c 91       	ld	r18, X
    1eea:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    1eec:	11 96       	adiw	r26, 0x01	; 1
    1eee:	8c 91       	ld	r24, X
    1ef0:	11 97       	sbiw	r26, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	88 27       	eor	r24, r24
    1ef8:	82 2b       	or	r24, r18
    1efa:	93 2b       	or	r25, r19
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    1efc:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1efe:	fa 01       	movw	r30, r20
    1f00:	0c 01       	movw	r0, r24
    1f02:	97 be       	out	0x37, r9	; 55
    1f04:	e8 95       	spm
    1f06:	11 24       	eor	r1, r1
        addrPtr += 2;
    1f08:	4e 5f       	subi	r20, 0xFE	; 254
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    1f0c:	f1 e0       	ldi	r31, 0x01	; 1
    1f0e:	a2 34       	cpi	r26, 0x42	; 66
    1f10:	bf 07       	cpc	r27, r31
    1f12:	51 f7       	brne	.-44     	; 0x1ee8 <main+0xe8>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1f14:	f6 01       	movw	r30, r12
    1f16:	b7 be       	out	0x37, r11	; 55
    1f18:	e8 95       	spm
      boot_spm_busy_wait();
    1f1a:	07 b6       	in	r0, 0x37	; 55
    1f1c:	00 fc       	sbrc	r0, 0
    1f1e:	fd cf       	rjmp	.-6      	; 0x1f1a <main+0x11a>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    1f20:	a7 be       	out	0x37, r10	; 55
    1f22:	e8 95       	spm
    1f24:	29 c0       	rjmp	.+82     	; 0x1f78 <main+0x178>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1f26:	84 37       	cpi	r24, 0x74	; 116
    1f28:	b1 f4       	brne	.+44     	; 0x1f56 <main+0x156>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    1f2a:	2e d0       	rcall	.+92     	; 0x1f88 <getch>
      length = getch();
    1f2c:	2d d0       	rcall	.+90     	; 0x1f88 <getch>
    1f2e:	e8 2e       	mov	r14, r24
      getch();
    1f30:	2b d0       	rcall	.+86     	; 0x1f88 <getch>

      verifySpace();
    1f32:	3d d0       	rcall	.+122    	; 0x1fae <verifySpace>
    1f34:	f6 01       	movw	r30, r12
    1f36:	fe 2c       	mov	r15, r14
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    1f38:	8f 01       	movw	r16, r30
    1f3a:	0f 5f       	subi	r16, 0xFF	; 255
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	84 91       	lpm	r24, Z+
    1f40:	1f d0       	rcall	.+62     	; 0x1f80 <putch>
      while (--length);
    1f42:	fa 94       	dec	r15
    1f44:	f8 01       	movw	r30, r16
    1f46:	c1 f7       	brne	.-16     	; 0x1f38 <main+0x138>
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    1f48:	08 94       	sec
    1f4a:	c1 1c       	adc	r12, r1
    1f4c:	d1 1c       	adc	r13, r1
    1f4e:	ea 94       	dec	r14
    1f50:	ce 0c       	add	r12, r14
    1f52:	d1 1c       	adc	r13, r1
    1f54:	12 c0       	rjmp	.+36     	; 0x1f7a <main+0x17a>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1f56:	85 37       	cpi	r24, 0x75	; 117
    1f58:	39 f4       	brne	.+14     	; 0x1f68 <main+0x168>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f5a:	29 d0       	rcall	.+82     	; 0x1fae <verifySpace>
      putch(SIGNATURE_0);
    1f5c:	8e e1       	ldi	r24, 0x1E	; 30
    1f5e:	10 d0       	rcall	.+32     	; 0x1f80 <putch>
      putch(SIGNATURE_1);
    1f60:	83 e9       	ldi	r24, 0x93	; 147
    1f62:	0e d0       	rcall	.+28     	; 0x1f80 <putch>
      putch(SIGNATURE_2);
    1f64:	87 e0       	ldi	r24, 0x07	; 7
    1f66:	9c cf       	rjmp	.-200    	; 0x1ea0 <main+0xa0>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1f68:	81 35       	cpi	r24, 0x51	; 81
    1f6a:	31 f4       	brne	.+12     	; 0x1f78 <main+0x178>
      // Adaboot no-wait mod
      verifySpace();
    1f6c:	20 d0       	rcall	.+64     	; 0x1fae <verifySpace>
      putch(STK_OK);
    1f6e:	80 e1       	ldi	r24, 0x10	; 16
    1f70:	07 d0       	rcall	.+14     	; 0x1f80 <putch>
      watchdogConfig(WATCHDOG_16MS); // the STK_OK response must be send after this line, so 16MS was a bit short
    1f72:	88 e0       	ldi	r24, 0x08	; 8
    1f74:	11 d0       	rcall	.+34     	; 0x1f98 <watchdogConfig>
    1f76:	ff cf       	rjmp	.-2      	; 0x1f76 <main+0x176>
      for(;;) {} // endless loop until watchdog reset
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1f78:	1a d0       	rcall	.+52     	; 0x1fae <verifySpace>
    }
    putch(STK_OK);
    1f7a:	80 e1       	ldi	r24, 0x10	; 16
    1f7c:	01 d0       	rcall	.+2      	; 0x1f80 <putch>
    1f7e:	6d cf       	rjmp	.-294    	; 0x1e5a <main+0x5a>

00001f80 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    1f80:	5d 9b       	sbis	0x0b, 5	; 11
    1f82:	fe cf       	rjmp	.-4      	; 0x1f80 <putch>
  UART_UDR = ch;
    1f84:	8c b9       	out	0x0c, r24	; 12
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    1f86:	08 95       	ret

00001f88 <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f88:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    1f8a:	5f 9b       	sbis	0x0b, 7	; 11
    1f8c:	fe cf       	rjmp	.-4      	; 0x1f8a <getch+0x2>
#if defined(BLUECONTROLLER) 
    extendWatchdogPeriodAfterStartup();
#endif
  }
#if !defined(BLUECONTROLLER)
  if (!(UART_SRA & _BV(FE0))) {
    1f8e:	5c 99       	sbic	0x0b, 4	; 11
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <getch+0xc>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f92:	a8 95       	wdr
       */
    watchdogReset();
  }
#endif
  
  ch = UART_UDR;
    1f94:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1f96:	08 95       	ret

00001f98 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f98:	98 e1       	ldi	r25, 0x18	; 24
    1f9a:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1f9c:	81 bd       	out	0x21, r24	; 33
}
    1f9e:	08 95       	ret

00001fa0 <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
    1fa0:	bd 9a       	sbi	0x17, 5	; 23
  LED_PORT &= ~_BV(LED); // switch LED off
    1fa2:	c5 98       	cbi	0x18, 5	; 24
  watchdogConfig(WATCHDOG_OFF);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	f8 df       	rcall	.-16     	; 0x1f98 <watchdogConfig>
  __asm__ __volatile__ (
    1fa8:	ee 27       	eor	r30, r30
    1faa:	ff 27       	eor	r31, r31
    1fac:	09 94       	ijmp

00001fae <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
    1fae:	ec df       	rcall	.-40     	; 0x1f88 <getch>
    1fb0:	80 32       	cpi	r24, 0x20	; 32
    1fb2:	11 f4       	brne	.+4      	; 0x1fb8 <verifySpace+0xa>
  {
    putch(STK_INSYNC);
    1fb4:	84 e1       	ldi	r24, 0x14	; 20
    1fb6:	e4 cf       	rjmp	.-56     	; 0x1f80 <putch>
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage (e.g. CONNECT message from BT module) will exit the bootloader
    if(blueCAvrdudeSynced)
      appStart();
#else
    appStart();
    1fb8:	f3 cf       	rjmp	.-26     	; 0x1fa0 <appStart>

00001fba <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fba:	1f 93       	push	r17
    1fbc:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    1fbe:	e4 df       	rcall	.-56     	; 0x1f88 <getch>
    1fc0:	11 50       	subi	r17, 0x01	; 1
    1fc2:	e9 f7       	brne	.-6      	; 0x1fbe <getNch+0x4>
  verifySpace();
    1fc4:	f4 df       	rcall	.-24     	; 0x1fae <verifySpace>
}
    1fc6:	1f 91       	pop	r17
    1fc8:	08 95       	ret
