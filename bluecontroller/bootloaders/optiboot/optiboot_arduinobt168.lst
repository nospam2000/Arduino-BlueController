
optiboot_arduinobt168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f2  00003e00  00003e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000087  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000270  00000000  00000000  000002f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000164  00000000  00000000  00000565  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000469  00000000  00000000  000006c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016a  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000244  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    3e00:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    3e02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    3e04:	14 be       	out	0x34, r1	; 52

#if defined(BLUECONTROLLER) 
  BLUEC_BTN_PORT |= _BV(BLUEC_BTN); // enable pull-up for BlueController button 
    3e06:	2d 9a       	sbi	0x05, 5	; 5
  //BLUEC_BT_RESET_PORT |= _BV(BLUEC_BT_RESET); // set BlueController BTM-222 RESET line to HIGH/pullup-enable
  //BLUEC_BT_RESET_DDR |= _BV(BLUEC_BT_RESET); /* set BlueController BTM-222 RESET line as output */
  blueCAvrdudeSynced = 0;
    3e08:	dd 24       	eor	r13, r13
  timOverflCnt = 0;
    3e0a:	ff 24       	eor	r15, r15

  if(!(BLUEC_BTN_PIN & _BV(BLUEC_BTN))
    3e0c:	1d 9b       	sbis	0x03, 5	; 3
    3e0e:	07 c0       	rjmp	.+14     	; 0x3e1e <main+0x1e>
    3e10:	80 91 00 01 	lds	r24, 0x0100
    3e14:	90 91 01 01 	lds	r25, 0x0101
    3e18:	8e 59       	subi	r24, 0x9E	; 158
    3e1a:	94 4c       	sbci	r25, 0xC4	; 196
    3e1c:	19 f4       	brne	.+6      	; 0x3e24 <main+0x24>
    || enterBootloaderByAppMagic == ENTER_BL_MAGIC)
  {
    enterBootloaderByAppMagicLSB = 0; // disable magic mechanism for next reset to avoid endless loop
    3e1e:	10 92 00 01 	sts	0x0100, r1
    3e22:	01 c0       	rjmp	.+2      	; 0x3e26 <main+0x26>
  }
  else
  {
    appStart();
    3e24:	cf d0       	rcall	.+414    	; 0x3fc4 <appStart>
#else
    if (!(ch & _BV(EXTRF))) appStart();
#endif

  // Set up watchdog to trigger after 1000 ms
  watchdogConfig(WATCHDOG_1S);
    3e26:	8e e0       	ldi	r24, 0x0E	; 14
    3e28:	c7 d0       	rcall	.+398    	; 0x3fb8 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3e2a:	85 e0       	ldi	r24, 0x05	; 5
    3e2c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    3e36:	88 e1       	ldi	r24, 0x18	; 24
    3e38:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    3e3c:	86 e0       	ldi	r24, 0x06	; 6
    3e3e:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    3e42:	80 e1       	ldi	r24, 0x10	; 16
    3e44:	80 93 c4 00 	sts	0x00C4, r24
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3e48:	66 24       	eor	r6, r6
    3e4a:	63 94       	inc	r6
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3e4c:	15 e0       	ldi	r17, 0x05	; 5
    3e4e:	81 2e       	mov	r8, r17
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3e50:	b1 e1       	ldi	r27, 0x11	; 17
    3e52:	7b 2e       	mov	r7, r27
      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(NRWWSECTIONFAVORSIZE) 
      if (!((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8)))
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    3e54:	a3 e0       	ldi	r26, 0x03	; 3
    3e56:	9a 2e       	mov	r9, r26
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e58:	9c d0       	rcall	.+312    	; 0x3f92 <getch>

#if defined(BLUECONTROLLER) 
    if(ch == STK_GET_SYNC) {
    3e5a:	80 33       	cpi	r24, 0x30	; 48
    3e5c:	21 f4       	brne	.+8      	; 0x3e66 <main+0x66>
      // this is the initial sequence, sent by avrdude
      verifySpace();
    3e5e:	b9 d0       	rcall	.+370    	; 0x3fd2 <verifySpace>
      blueCAvrdudeSynced = 1;
    3e60:	dd 24       	eor	r13, r13
    3e62:	d3 94       	inc	r13
    3e64:	8b c0       	rjmp	.+278    	; 0x3f7c <main+0x17c>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
    3e66:	81 34       	cpi	r24, 0x41	; 65
    3e68:	21 f4       	brne	.+8      	; 0x3e72 <main+0x72>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	ba d0       	rcall	.+372    	; 0x3fe2 <getNch>
      putch(0x03);
    3e6e:	83 e0       	ldi	r24, 0x03	; 3
    3e70:	1c c0       	rjmp	.+56     	; 0x3eaa <main+0xaa>
    }
    else if(ch == STK_SET_DEVICE) {
    3e72:	82 34       	cpi	r24, 0x42	; 66
    3e74:	11 f4       	brne	.+4      	; 0x3e7a <main+0x7a>
      // SET DEVICE is ignored
      getNch(20);
    3e76:	84 e1       	ldi	r24, 0x14	; 20
    3e78:	03 c0       	rjmp	.+6      	; 0x3e80 <main+0x80>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3e7a:	85 34       	cpi	r24, 0x45	; 69
    3e7c:	19 f4       	brne	.+6      	; 0x3e84 <main+0x84>
      // SET DEVICE EXT is ignored
      getNch(5);
    3e7e:	85 e0       	ldi	r24, 0x05	; 5
    3e80:	b0 d0       	rcall	.+352    	; 0x3fe2 <getNch>
    3e82:	7c c0       	rjmp	.+248    	; 0x3f7c <main+0x17c>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3e84:	85 35       	cpi	r24, 0x55	; 85
    3e86:	61 f4       	brne	.+24     	; 0x3ea0 <main+0xa0>
      // LOAD ADDRESS
      address = getch();
    3e88:	84 d0       	rcall	.+264    	; 0x3f92 <getch>
      address = (address & 0xff) | (getch() << 8);
    3e8a:	08 2f       	mov	r16, r24
    3e8c:	10 e0       	ldi	r17, 0x00	; 0
    3e8e:	81 d0       	rcall	.+258    	; 0x3f92 <getch>
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	b8 2e       	mov	r11, r24
    3e94:	aa 24       	eor	r10, r10
    3e96:	a0 2a       	or	r10, r16
    3e98:	b1 2a       	or	r11, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
#endif
      address += address; // Convert from word address to byte address
    3e9a:	aa 0c       	add	r10, r10
    3e9c:	bb 1c       	adc	r11, r11
    3e9e:	6d c0       	rjmp	.+218    	; 0x3f7a <main+0x17a>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3ea0:	86 35       	cpi	r24, 0x56	; 86
    3ea2:	29 f4       	brne	.+10     	; 0x3eae <main+0xae>
      // UNIVERSAL command is ignored
      getNch(4);
    3ea4:	84 e0       	ldi	r24, 0x04	; 4
    3ea6:	9d d0       	rcall	.+314    	; 0x3fe2 <getNch>
      putch(0x00);
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	6b d0       	rcall	.+214    	; 0x3f82 <putch>
    3eac:	67 c0       	rjmp	.+206    	; 0x3f7c <main+0x17c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    3eae:	84 36       	cpi	r24, 0x64	; 100
    3eb0:	09 f0       	breq	.+2      	; 0x3eb4 <main+0xb4>
    3eb2:	3c c0       	rjmp	.+120    	; 0x3f2c <main+0x12c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    3eb4:	6e d0       	rcall	.+220    	; 0x3f92 <getch>
      length = getch();
    3eb6:	6d d0       	rcall	.+218    	; 0x3f92 <getch>
    3eb8:	08 2f       	mov	r16, r24
      getch();
    3eba:	6b d0       	rcall	.+214    	; 0x3f92 <getch>

      // If we are in RWW section, immediately start page erase
#if !defined(NRWWSECTIONFAVORSIZE) 
      if ((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8))
    3ebc:	8b 2d       	mov	r24, r11
    3ebe:	99 27       	eor	r25, r25
    3ec0:	18 2f       	mov	r17, r24
    3ec2:	88 33       	cpi	r24, 0x38	; 56
    3ec4:	18 f4       	brcc	.+6      	; 0x3ecc <main+0xcc>
        __boot_page_erase_short((uint16_t)(void*)address);
    3ec6:	f5 01       	movw	r30, r10
    3ec8:	97 be       	out	0x37, r9	; 55
    3eca:	e8 95       	spm
    3ecc:	c2 e0       	ldi	r28, 0x02	; 2
    3ece:	d1 e0       	ldi	r29, 0x01	; 1
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    3ed0:	60 d0       	rcall	.+192    	; 0x3f92 <getch>
    3ed2:	89 93       	st	Y+, r24
      while (--length);
    3ed4:	01 50       	subi	r16, 0x01	; 1
    3ed6:	e1 f7       	brne	.-8      	; 0x3ed0 <main+0xd0>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(NRWWSECTIONFAVORSIZE) 
      if (!((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8)))
    3ed8:	18 33       	cpi	r17, 0x38	; 56
    3eda:	18 f0       	brcs	.+6      	; 0x3ee2 <main+0xe2>
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    3edc:	f5 01       	movw	r30, r10
    3ede:	97 be       	out	0x37, r9	; 55
    3ee0:	e8 95       	spm
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    3ee2:	07 b6       	in	r0, 0x37	; 55
    3ee4:	00 fc       	sbrc	r0, 0
    3ee6:	fd cf       	rjmp	.-6      	; 0x3ee2 <main+0xe2>
    3ee8:	a5 01       	movw	r20, r10
    3eea:	a2 e0       	ldi	r26, 0x02	; 2
    3eec:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    3eee:	2c 91       	ld	r18, X
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    3ef2:	11 96       	adiw	r26, 0x01	; 1
    3ef4:	8c 91       	ld	r24, X
    3ef6:	11 97       	sbiw	r26, 0x01	; 1
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	98 2f       	mov	r25, r24
    3efc:	88 27       	eor	r24, r24
    3efe:	82 2b       	or	r24, r18
    3f00:	93 2b       	or	r25, r19
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    3f02:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3f04:	fa 01       	movw	r30, r20
    3f06:	0c 01       	movw	r0, r24
    3f08:	67 be       	out	0x37, r6	; 55
    3f0a:	e8 95       	spm
    3f0c:	11 24       	eor	r1, r1
        addrPtr += 2;
    3f0e:	4e 5f       	subi	r20, 0xFE	; 254
    3f10:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    3f12:	f1 e0       	ldi	r31, 0x01	; 1
    3f14:	a2 38       	cpi	r26, 0x82	; 130
    3f16:	bf 07       	cpc	r27, r31
    3f18:	51 f7       	brne	.-44     	; 0x3eee <main+0xee>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3f1a:	f5 01       	movw	r30, r10
    3f1c:	87 be       	out	0x37, r8	; 55
    3f1e:	e8 95       	spm
      boot_spm_busy_wait();
    3f20:	07 b6       	in	r0, 0x37	; 55
    3f22:	00 fc       	sbrc	r0, 0
    3f24:	fd cf       	rjmp	.-6      	; 0x3f20 <main+0x120>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3f26:	77 be       	out	0x37, r7	; 55
    3f28:	e8 95       	spm
    3f2a:	27 c0       	rjmp	.+78     	; 0x3f7a <main+0x17a>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f2c:	84 37       	cpi	r24, 0x74	; 116
    3f2e:	b1 f4       	brne	.+44     	; 0x3f5c <main+0x15c>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    3f30:	30 d0       	rcall	.+96     	; 0x3f92 <getch>
      length = getch();
    3f32:	2f d0       	rcall	.+94     	; 0x3f92 <getch>
    3f34:	c8 2e       	mov	r12, r24
      getch();
    3f36:	2d d0       	rcall	.+90     	; 0x3f92 <getch>

      verifySpace();
    3f38:	4c d0       	rcall	.+152    	; 0x3fd2 <verifySpace>
    3f3a:	f5 01       	movw	r30, r10
    3f3c:	ec 2c       	mov	r14, r12
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    3f3e:	8f 01       	movw	r16, r30
    3f40:	0f 5f       	subi	r16, 0xFF	; 255
    3f42:	1f 4f       	sbci	r17, 0xFF	; 255
    3f44:	84 91       	lpm	r24, Z+
    3f46:	1d d0       	rcall	.+58     	; 0x3f82 <putch>
      while (--length);
    3f48:	ea 94       	dec	r14
    3f4a:	f8 01       	movw	r30, r16
    3f4c:	c1 f7       	brne	.-16     	; 0x3f3e <main+0x13e>
# define UART_SRL UBRR3L
# define UART_UDR UDR3
#endif

/* main program starts here */
int main(void) {
    3f4e:	08 94       	sec
    3f50:	a1 1c       	adc	r10, r1
    3f52:	b1 1c       	adc	r11, r1
    3f54:	ca 94       	dec	r12
    3f56:	ac 0c       	add	r10, r12
    3f58:	b1 1c       	adc	r11, r1
    3f5a:	10 c0       	rjmp	.+32     	; 0x3f7c <main+0x17c>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f5c:	85 37       	cpi	r24, 0x75	; 117
    3f5e:	39 f4       	brne	.+14     	; 0x3f6e <main+0x16e>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f60:	38 d0       	rcall	.+112    	; 0x3fd2 <verifySpace>
      putch(SIGNATURE_0);
    3f62:	8e e1       	ldi	r24, 0x1E	; 30
    3f64:	0e d0       	rcall	.+28     	; 0x3f82 <putch>
      putch(SIGNATURE_1);
    3f66:	84 e9       	ldi	r24, 0x94	; 148
    3f68:	0c d0       	rcall	.+24     	; 0x3f82 <putch>
      putch(SIGNATURE_2);
    3f6a:	86 e0       	ldi	r24, 0x06	; 6
    3f6c:	9e cf       	rjmp	.-196    	; 0x3eaa <main+0xaa>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    3f6e:	81 35       	cpi	r24, 0x51	; 81
    3f70:	21 f4       	brne	.+8      	; 0x3f7a <main+0x17a>
      // Adaboot no-wait mod
      verifySpace();
    3f72:	2f d0       	rcall	.+94     	; 0x3fd2 <verifySpace>
      watchdogConfig(WATCHDOG_64MS); // 16ms was not enough to send the result back to avrdude
    3f74:	8a e0       	ldi	r24, 0x0A	; 10
    3f76:	20 d0       	rcall	.+64     	; 0x3fb8 <watchdogConfig>
    3f78:	ff cf       	rjmp	.-2      	; 0x3f78 <main+0x178>
      for(;;) {} // endless loop, waiting for hardware reset
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f7a:	2b d0       	rcall	.+86     	; 0x3fd2 <verifySpace>
    }
    putch(STK_OK);
    3f7c:	80 e1       	ldi	r24, 0x10	; 16
    3f7e:	01 d0       	rcall	.+2      	; 0x3f82 <putch>
    3f80:	6b cf       	rjmp	.-298    	; 0x3e58 <main+0x58>

00003f82 <putch>:
  }
}

void putch(char ch) {
    3f82:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f84:	80 91 c0 00 	lds	r24, 0x00C0
    3f88:	85 ff       	sbrs	r24, 5
    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch+0x2>
  UART_UDR = ch;
    3f8c:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    3f90:	08 95       	ret

00003f92 <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f92:	a8 95       	wdr
    3f94:	9f 2d       	mov	r25, r15
  if(timOverflCnt < (F_CPU/(1024*65536/EXTENDED_WAITTIME)))
  {
    // each timer overflow takes 8.39 seconds @8MHz
    if(TIFR1 & _BV(TOV1))
    {
      TIFR1 = _BV(TOV1);
    3f96:	21 e0       	ldi	r18, 0x01	; 1
    3f98:	07 c0       	rjmp	.+14     	; 0x3fa8 <getch+0x16>
#if defined(BLUECONTROLLER) 
/* the watchdog time after startup is too small when the reset button has to be pressed manually
before starting the download. Additionally it takes some time to establish the bluetooth connection
and the Arduino IDE compiles the sketch before download. */
void extendWatchdogPeriodAfterStartup() {
  if(timOverflCnt < (F_CPU/(1024*65536/EXTENDED_WAITTIME)))
    3f9a:	98 30       	cpi	r25, 0x08	; 8
    3f9c:	28 f4       	brcc	.+10     	; 0x3fa8 <getch+0x16>
  {
    // each timer overflow takes 8.39 seconds @8MHz
    if(TIFR1 & _BV(TOV1))
    3f9e:	b0 9b       	sbis	0x16, 0	; 22
    3fa0:	02 c0       	rjmp	.+4      	; 0x3fa6 <getch+0x14>
    {
      TIFR1 = _BV(TOV1);
    3fa2:	26 bb       	out	0x16, r18	; 22
      timOverflCnt++;
    3fa4:	9f 5f       	subi	r25, 0xFF	; 255
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3fa6:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3fa8:	80 91 c0 00 	lds	r24, 0x00C0
    3fac:	87 ff       	sbrs	r24, 7
    3fae:	f5 cf       	rjmp	.-22     	; 0x3f9a <getch+0x8>
    3fb0:	f9 2e       	mov	r15, r25
       */
    watchdogReset();
  }
#endif
  
  ch = UART_UDR;
    3fb2:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3fb6:	08 95       	ret

00003fb8 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fb8:	e0 e6       	ldi	r30, 0x60	; 96
    3fba:	f0 e0       	ldi	r31, 0x00	; 0
    3fbc:	98 e1       	ldi	r25, 0x18	; 24
    3fbe:	90 83       	st	Z, r25
  WDTCSR = x;
    3fc0:	80 83       	st	Z, r24
}
    3fc2:	08 95       	ret

00003fc4 <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
    3fc4:	25 9a       	sbi	0x04, 5	; 4
  LED_PORT &= ~_BV(LED); // switch LED off
    3fc6:	2d 98       	cbi	0x05, 5	; 5
  watchdogConfig(WATCHDOG_OFF);
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	f6 df       	rcall	.-20     	; 0x3fb8 <watchdogConfig>
  __asm__ __volatile__ (
    3fcc:	ee 27       	eor	r30, r30
    3fce:	ff 27       	eor	r31, r31
    3fd0:	09 94       	ijmp

00003fd2 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
    3fd2:	df df       	rcall	.-66     	; 0x3f92 <getch>
    3fd4:	80 32       	cpi	r24, 0x20	; 32
    3fd6:	11 f4       	brne	.+4      	; 0x3fdc <verifySpace+0xa>
  {
    putch(STK_INSYNC);
    3fd8:	84 e1       	ldi	r24, 0x14	; 20
    3fda:	d3 cf       	rjmp	.-90     	; 0x3f82 <putch>
  }
  else
  {
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage (e.g. CONNECT message from BT module) will exit the bootloader
    if(blueCAvrdudeSynced)
    3fdc:	d1 10       	cpse	r13, r1
      appStart();
    3fde:	f2 cf       	rjmp	.-28     	; 0x3fc4 <appStart>
    3fe0:	08 95       	ret

00003fe2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fe2:	1f 93       	push	r17
    3fe4:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    3fe6:	d5 df       	rcall	.-86     	; 0x3f92 <getch>
    3fe8:	11 50       	subi	r17, 0x01	; 1
    3fea:	e9 f7       	brne	.-6      	; 0x3fe6 <getNch+0x4>
  verifySpace();
    3fec:	f2 df       	rcall	.-28     	; 0x3fd2 <verifySpace>
}
    3fee:	1f 91       	pop	r17
    3ff0:	08 95       	ret
