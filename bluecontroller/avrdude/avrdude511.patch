diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/ChangeLog avrdude-5.11.1.bt/ChangeLog
--- avrdude-5.11.1.upstream/ChangeLog	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/ChangeLog	2012-12-30 20:57:09.000000000 +0100
@@ -1,3 +1,7 @@
+2012-12-30  Michael Dreher <michael@5dot1.de>
+
+        * added new programmer type 'BlueController' (bluec) 
+
 2011-09-15  Joerg Wunsch <j.gnu@uriah.heep.sax.de>
 
 	* configure.ac: Bump version for releasing AVRDUDE 5.11.1.
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/Makefile.am avrdude-5.11.1.bt/Makefile.am
--- avrdude-5.11.1.upstream/Makefile.am	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/Makefile.am	2012-12-30 20:57:09.000000000 +0100
@@ -95,6 +95,8 @@
 	avrpart.h \
 	bitbang.c \
 	bitbang.h \
+	bluec.c \
+	bluec.h \
 	buspirate.c \
 	buspirate.h \
 	butterfly.c \
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/avrdude.conf.in avrdude-5.11.1.bt/avrdude.conf.in
--- avrdude-5.11.1.upstream/avrdude.conf.in	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/avrdude.conf.in	2012-12-30 20:57:09.000000000 +0100
@@ -21,7 +21,7 @@
 #                  jtagmki | jtagmkii | jtagmkii_isp | jtagmkii_dw |
 #                  jtagmkII_avr32 | jtagmkii_pdi |
 #                  dragon_dw | dragon_jtag | dragon_isp | dragon_pp |
-#                  dragon_hvsp | dragon_pdi | arduino | wiring; # programmer type
+#                  dragon_hvsp | dragon_pdi | arduino | wiring | bluec; # programmer type
 #       baudrate = <num> ;                          # baudrate for avr910-programmer
 #       vcc      = <num1> [, <num2> ... ] ;         # pin number(s)
 #       reset    = <num> ;                          # pin number
@@ -453,6 +453,12 @@
 ;
 
 programmer
+  id    = "bluec";
+  desc  = "BlueController";
+  type  = bluec;
+;
+
+programmer
   id    = "buspirate";
   desc  = "The Bus Pirate";
   type  = buspirate;
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/bluec.c avrdude-5.11.1.bt/bluec.c
--- avrdude-5.11.1.upstream/bluec.c	1970-01-01 01:00:00.000000000 +0100
+++ avrdude-5.11.1.bt/bluec.c	2012-12-30 20:57:09.000000000 +0100
@@ -0,0 +1,432 @@
+/*
+ * avrdude support for BlueController ISP programmer
+ * Copyright (C) 2011 Michael Dreher <michael@5dot1.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/* $Id: bluec.c $ */
+
+/*
+ * avrdude interface for BlueController programmer
+ *
+ * The BlueController programmer is mostly a STK500v1, just with additional
+ * features for better communication performance over high latency communication
+ * paths like Bluetooth or WLAN (around factor 5 faster, especially on iMacs).
+ * Uses asynchronous acknowledge, RLE compression and implicit verify.
+ */
+
+#include "ac_cfg.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <unistd.h>
+
+#include "avrdude.h"
+#include "avr.h"
+#include "pgm.h"
+#include "stk500_private.h"
+#include "stk500.h"
+#include "serial.h"
+
+const unsigned short mtu = 126; // this is what I get for a RFComm commnection on Mac OSX 10.7 TODO: should be read from serial driver after connecting
+//const unsigned short minimumBlockSize = 64; // don't send smaller packets
+const unsigned long writeDataOverhead = 6; // the protocol overhead of STK_BULK_WRITE_DATA
+const unsigned long writeVrfyOverhead = 8; // the protocol overhead of BULK_WRITE_VRFY_ERR
+
+static int bluec_paged_load(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, 
+                             int page_size, int n_bytes)
+{
+  // using a large page_size (which is in fact a block_size and not a page_size!) 
+  return stk500_paged_load(pgm, p, m, 16384, n_bytes);
+}
+
+// 'dstLen' is the maximum length of the _payload_, for the complete allowed frame length you have to add the protocol overhead
+int bluec_stuff_sendbuf(unsigned char* dstBuf, unsigned short dstLen, unsigned char* srcBuf, unsigned short srcLen, unsigned short* dstUsed, unsigned short *srcUsed)
+{
+  unsigned short cursize = dstLen;
+  if(cursize > srcLen)
+    cursize = srcLen;
+  unsigned short crc = 0; // TODO: has to be calculated
+  int i = 0;
+  dstBuf[i++] = Cmnd_STK_BULK_WRITE_DATA;
+  dstBuf[i++] = crc & 0xff;
+  dstBuf[i++] = (crc >> 8) & 0xff;
+  dstBuf[i++] = cursize & 0xff;
+  dstBuf[i++] = (cursize >> 8) & 0xff;
+
+  memcpy(&dstBuf[i], srcBuf, cursize);
+  i += cursize;
+  dstBuf[i++] = Sync_CRC_EOP;
+
+  *dstUsed = i;
+  *srcUsed = cursize;
+
+  return 0;
+}
+
+// compress the data before sending using a simple run-length-encoding
+int bluec_stuff_sendbuf_rle(unsigned char* dstBuf, unsigned short dstLen, unsigned char* srcBuf, unsigned short srcLen, unsigned short* dstUsed, unsigned short *srcUsed)
+{
+  unsigned short crc = 0; // TODO: has to be calculated
+  unsigned short i = 0;
+  dstBuf[i++] = Cmnd_STK_BULK_WRITE_DATA;
+  i += 2*2; // skip crc and payload length fields here, these will be filled below
+
+  int srcRemain;
+  int dstRemain;
+  long j;
+  unsigned short repCnt;
+  for(j = 0; ((srcRemain = srcLen - j) > 0) && ((dstRemain = dstLen - i) > 0); j += repCnt)
+  {
+    unsigned char val = srcBuf[j];
+    for(repCnt = 1; (repCnt <= srcRemain) && (repCnt < 0xffff) && (val == srcBuf[j + repCnt]); repCnt++)
+    { }
+
+    if((val == 0xff) && (repCnt == 1) && (dstRemain >= 2))
+    {
+      // escape a single 0xFF => 0xFF 0x00
+      dstBuf[i++] = 0xFF;
+      dstBuf[i++] = 0x00;
+    }
+    else if((val == 0xff) && (repCnt == 2) && (dstRemain >= 2))
+    {
+      // optimized case for 0xFF 0xFF => 0xFF 0x01
+      dstBuf[i++] = 0xFF;
+      dstBuf[i++] = 0x01;
+    }
+    else if((val != 0xff) && (repCnt <= 3) && (dstRemain >= 1))
+    {
+      // normal case, directly submit value
+      repCnt = 1;
+      dstBuf[i++] = val;
+    }
+    else if((repCnt <= 254) && (dstRemain >= 3))
+    {
+      // 8-bit repeat count
+      dstBuf[i++] = 0xFF;
+      dstBuf[i++] = repCnt;
+      dstBuf[i++] = val;
+    }
+    else if((repCnt > 254) && (dstRemain >= 5))
+    {
+      // 16-bit repeat count
+      dstBuf[i++] = 0xFF;
+      dstBuf[i++] = 0xFF;
+      dstBuf[i++] = repCnt & 0xff;
+      dstBuf[i++] = (repCnt >> 8) & 0xff;
+      dstBuf[i++] = val;
+    }
+    else
+    {
+      // doesn't fit into current frame
+      break;
+    }
+  }
+
+  dstBuf[i++] = Sync_CRC_EOP;
+  dstBuf[1] = crc & 0xff;
+  dstBuf[2] = (crc >> 8) & 0xff;
+  dstBuf[3] = (i - writeDataOverhead) & 0xff;
+  dstBuf[4] = ((i - writeDataOverhead) >> 8) & 0xff;
+
+  *dstUsed = i;
+  *srcUsed = j;
+  return 0;
+}
+
+
+static int bluec_bulk_write(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, 
+                              int page_size, int n_bytes)
+{
+  int rc = n_bytes; // return code, negative on failure
+	long orig_serial_recv_timeout = serial_recv_timeout;
+
+  const unsigned long bufSize = 1024;
+  unsigned char buf[bufSize]; // for receiving a failed verify notification we need some reserve
+  int32_t i;
+
+  int a_div; // 1 means byte adressing, 2 means word addressing
+  if ((m->op[AVR_OP_LOADPAGE_LO]) || (m->op[AVR_OP_READ_LO]))
+  {
+    a_div = 2;
+  }
+  else
+  {
+    // TODO: to make this work, the programmer code has to be adapted as well
+    // TODO: add support of byte addresses and the OP-codes AVR_OP_WRITE_LO and AVR_OP_LOADPAGE_LO. Upload
+    // the opcode table to the programmer
+    a_div = 1;
+    return -1000;
+  }
+
+  if (n_bytes > m->size) {
+    n_bytes = m->size;
+  }
+
+  // TODO: implement CRC check on client and server side
+  unsigned char bulkOptions = Optn_STK_BULK_WRITE_VERIFY | Optn_STK_BULK_WRITE_RLE;
+  i = 0;
+  buf[i++] = Cmnd_STK_BULK_WRITE_START;
+  buf[i++] = bulkOptions;
+  buf[i++] = Sync_CRC_EOP;
+  stk500_send( pgm, buf, i);
+  if (stk500_recv(pgm, buf, 5) < 0 || buf[0] != Resp_STK_BULK_WRITE_START_ACK || buf[4] != Sync_CRC_EOP)
+  {
+    fprintf(stderr,
+          "%s: bluec_bulk_write(): BULK_WRITE_START failed, "
+          "expect=0x%02x/0x%02x, resp=0x%02x/0x%02x\n", 
+          progname, Resp_STK_BULK_WRITE_START_ACK, Sync_CRC_EOP, buf[0], buf[4]);
+    rc = -1;
+    return rc;
+  }
+  // The RLE compression may transmit a lot of bytes which need to be processed, so the programmer
+  // will be busy for a long time. This happened with the default timeout (5 seconds) and a 32kB
+  // file which consists of very good compressable data.
+  // TODO: could be solved by more acks for such large blocks
+	serial_recv_timeout = 15000;
+  bulkOptions &= buf[1]; // maybe not all requested options could be enabled, so mask out the ones which aren't active
+  const unsigned short windowSize = buf[2] | buf[3] << 8;
+  unsigned long writePos = 0; // counting of the written protocol bytes, starts after reading BULK_WRITE_START_ACK
+  unsigned long ackPos = 0; // counting of the acknowledged protocol bytes, starts after reading BULK_WRITE_START_ACK
+
+  unsigned short block_size = mtu - writeDataOverhead; // netto data of one block
+  if((block_size + writeDataOverhead) > bufSize)
+    block_size = bufSize - writeDataOverhead;
+  if(block_size > (windowSize - 2) / 2) // make sure at least two blocks can be traveling at the same time
+    block_size = (windowSize - 2) / 2;
+
+  unsigned int byteAddr = 0;
+  for(;;)
+  {
+    report_progress (byteAddr, n_bytes, NULL);
+
+    int32_t remain;
+    int32_t availWindowSize;
+    // TODO: handle the case when no whole block is available but no ACKs are arriving. Fallback to smaller blocks
+    while((availWindowSize = (windowSize - (writePos - ackPos))) >= block_size)
+    {
+      // prog command
+      remain = n_bytes - byteAddr;
+      if(remain > 0)
+      {
+        i = 0;
+        unsigned short dstUsed;
+        unsigned short srcUsed;
+        if(bulkOptions & Optn_STK_BULK_WRITE_RLE)
+          bluec_stuff_sendbuf_rle(buf, block_size, &m->buf[byteAddr], remain, &dstUsed, &srcUsed);
+        else
+          bluec_stuff_sendbuf(buf, block_size, &m->buf[byteAddr], remain, &dstUsed, &srcUsed);
+        i += dstUsed;
+        stk500_send(pgm, buf, i); // TODO: handle error
+        writePos += i;
+        byteAddr += srcUsed;
+      }
+      else
+      {
+        break;
+      }
+    }
+
+    const int BULK_WRITE_END_TELEGRAM_LEN = 2;
+    remain = n_bytes - byteAddr;
+    availWindowSize = (windowSize - (writePos - ackPos));
+    if((remain == 0) && (availWindowSize >= BULK_WRITE_END_TELEGRAM_LEN))
+    {
+      // end of data reached, just handle outstanding notifications as long as ackPos < writePos
+      i = 0;
+      buf[i++] = Cmnd_STK_BULK_WRITE_END;
+      buf[i++] = Sync_CRC_EOP;
+      stk500_send( pgm, buf, i);
+      writePos += i;
+      byteAddr += 1; // prohibits another sending of STK_BULK_WRITE_END
+    }
+
+    if (stk500_recv(pgm, buf, 1) < 0)
+    {
+      fprintf(stderr, "%s: bluec_bulk_write(): Timeout while waiting for event\n", progname);
+      rc = -2;
+      break;
+    }
+    else
+    {
+      switch(buf[0])
+      {
+        case Resp_STK_BULK_WRITE_ACK:
+          if (stk500_recv(pgm, &buf[1], 11 - 1) < 0)
+          {
+            fprintf(stderr, "%s: bluec_bulk_write(): Timeout while reading BULK_WRITE_ACK\n", progname);
+            rc = -6;
+            goto bulkReceiveEnd;
+          }
+          if(buf[10] != Sync_CRC_EOP)
+          {
+            fprintf(stderr, "%s: bluec_bulk_write(): Out of sync while reading BULK_WRITE_ACK\n", progname);
+            rc = -9;
+            goto bulkReceiveEnd;
+          }
+          ackPos = buf[6] | (buf[7] << 8) | (buf[8] << 16) | (buf[8] << 24);
+          unsigned long ackAddr = buf[2] | (buf[3] << 8) | (buf[4] << 16) | (buf[5] << 24);
+          if(buf[1] == Stat_STK_BULK_ACKSTATE_NAK)
+          {
+            // retransmit from given address; be careful not to mix byteAddr and loadAddr!
+            byteAddr = ackAddr; // set send position back to addr before error
+            i = 0;
+            buf[i++] = Cmnd_STK_BULK_SET_BYTEADDR;
+            buf[i++] = byteAddr & 0xff;
+            buf[i++] = (byteAddr >> 8) & 0xff;
+            buf[i++] = (byteAddr >> 16) & 0xff;
+            buf[i++] = (byteAddr >> 24) & 0xff;
+            buf[i++] = Sync_CRC_EOP;
+            stk500_send(pgm, buf, i); // TODO: handle error
+            writePos += i;
+            // TODO: limit number of retries
+          }
+          else
+          {
+            // TODO: handle other cases
+
+            // end of data reached, just handle outstanding notifications as long as ackPos < writePos
+          }
+          break;
+
+        case Resp_STK_BULK_WRITE_VRFY_ERR:
+          if (stk500_recv(pgm, &buf[1], 7-1) < 0)
+          {
+            fprintf(stderr, "%s: bluec_bulk_write(): Timeout while reading VRFY_ERR\n", progname);
+            rc = -4;
+            goto bulkReceiveEnd;
+          }
+          unsigned long vrfyAddr = buf[1] | (buf[2] << 8) | (buf[3] << 16) | (buf[4] << 24);
+          unsigned short curSize = buf[5] | (buf[6] << 8);
+          if ((curSize + writeVrfyOverhead) > bufSize)
+          {
+            fprintf(stderr, "%s: bluec_bulk_write(): Overflow while reading data of VRFY_ERR\n", progname);
+            rc = -7;
+            goto bulkReceiveEnd;
+          }
+          if (stk500_recv(pgm, &buf[7], curSize + 1) < 0) // +1 for the ending Sync_CRC_EOP
+          {
+            fprintf(stderr, "%s: bluec_bulk_write(): Timeout while reading page data of VRFY_ERR\n", progname);
+            rc = -5;
+            goto bulkReceiveEnd;
+          }
+          if(buf[curSize + writeVrfyOverhead - 1] != Sync_CRC_EOP)
+          {
+            fprintf(stderr, "%s: bluec_bulk_write(): Out of sync while reading data of VRFY_ERR\n", progname);
+            rc = -8;
+            goto bulkReceiveEnd;
+          }
+          // TODO: add detailed error message. We continue flashing but show the error.
+          fprintf(stderr, "%s: bluec_bulk_write(): Verify error for page 0x%04lx, page size %u\n", progname, vrfyAddr, curSize);
+          fprintf(stderr, "  addr:  read != orig\n");
+          int vi;
+          for(vi = 0; vi < curSize; vi++)
+          {
+            if(buf[vi + writeVrfyOverhead - 1] != m->buf[vrfyAddr + vi])
+            {
+              fprintf(stderr, "0x%04lx:  0x%02x != 0x%02x\n", vrfyAddr + vi, buf[vi + writeVrfyOverhead - 1], m->buf[vrfyAddr + vi]);
+            }
+          }
+          //rc = -3;
+          break; // continue the loop
+
+        case Resp_STK_BULK_WRITE_END_ACK:
+          if (stk500_recv(pgm, &buf[1], 7-1) < 0)
+          {
+            fprintf(stderr, "%s: bluec_bulk_write(): Timeout while reading BULK_WRITE_END_ACK\n", progname);
+            rc = 100;
+          }
+          else if(buf[6] != Sync_CRC_EOP)
+          {
+            fprintf(stderr,
+                  "%s: bluec_bulk_write(): BULK_WRITE_END failed, "
+                  "expect=0x%02x, resp=0x%02x\n", 
+                  progname, Sync_CRC_EOP, buf[6]);
+            rc = -101;
+          }
+          else if(buf[1] != 0)
+          {
+            // TODO: detailed analysis of the error
+            fprintf(stderr,
+                  "%s: bluec_bulk_write(): BULK_WRITE_END failed, "
+                  "ACK.error=0x%02x\n", 
+                  progname, buf[1]);
+            rc = -102;
+          }
+          // after writing the last data byte, the byteAddr is 1 greater than the buffer size, therefore
+          // we must use byteAddr - 1 here
+          else if((buf[2] | (buf[3] << 8) | (buf[4] << 16) | (buf[5] << 24)) != (byteAddr - 1))
+          {
+            fprintf(stderr,
+                  "%s: bluec_bulk_write(): BULK_WRITE_END failed, "
+                  "ACK.addr(0x%04x) != endAddr(0x%04x)\n", 
+                  progname, buf[2] | (buf[3] << 8) | (buf[4] << 16) | (buf[5] << 24), byteAddr - 1);
+            rc = -103;
+          }
+          goto bulkReceiveEnd;
+          break;
+
+        default:
+          fprintf(stderr, "%s: bluec_bulk_write(): Unknown event received, id=0x%02x\n", progname, buf[0]);
+          rc = -3;
+          goto bulkReceiveEnd;
+          break;
+      }
+    }
+  }
+bulkReceiveEnd:
+
+  
+  if(rc > 0)
+  {
+  }
+
+	serial_recv_timeout = orig_serial_recv_timeout;
+  return rc;
+}
+
+
+static int bluec_paged_write(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, 
+                              int page_size, int n_bytes)
+{
+  if (strcmp(m->desc, "flash") == 0)
+  {
+    int bulk_rc = bluec_bulk_write(pgm, p, m, page_size, n_bytes);
+    if(bulk_rc >= 0)
+      return bulk_rc;
+  }
+
+  // when bulk write failed or memtype!='flash' fall back to paged_write
+  return stk500_paged_write(pgm, p, m, page_size, n_bytes);
+}
+
+
+void bluec_initpgm(PROGRAMMER * pgm)
+{
+  /* This is mostly a STK500; just using bulk communication optimized for
+   * bluetooth.
+   * The DTR signal doesn't matter because it doesn't support auto-reset via DTR */
+  stk500_initpgm(pgm);
+
+  strcpy(pgm->type, "BlueController");
+  pgm->paged_write    = bluec_paged_write;
+  pgm->paged_load     = bluec_paged_load;
+}
+
+// TODO: remove before committing patch
+// vim:ts=2:sw=2:expandtab:smartindent:autoindent
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/bluec.h avrdude-5.11.1.bt/bluec.h
--- avrdude-5.11.1.upstream/bluec.h	1970-01-01 01:00:00.000000000 +0100
+++ avrdude-5.11.1.bt/bluec.h	2012-12-30 20:57:09.000000000 +0100
@@ -0,0 +1,29 @@
+/*
+ * avrdude support for BlueController ISP programmer
+ * Copyright (C) 2011 Michael Dreher <michael@5dot1.de>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/* $Id: bluec.h $ */
+
+#ifndef bluec_h__
+#define bluec_h__
+
+void bluec_initpgm (PROGRAMMER * pgm);
+
+#endif
+
+
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/config_gram.y avrdude-5.11.1.bt/config_gram.y
--- avrdude-5.11.1.upstream/config_gram.y	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/config_gram.y	2012-12-30 20:57:09.000000000 +0100
@@ -38,6 +38,7 @@
 #include "pgm.h"
 #include "stk500.h"
 #include "arduino.h"
+#include "bluec.h"
 #include "buspirate.h"
 #include "stk500v2.h"
 #include "wiring.h"
@@ -86,6 +87,7 @@
 %token K_ARDUINO
 %token K_AVRFTDI
 %token K_BAUDRATE
+%token K_BLUEC
 %token K_BS2
 %token K_BUFF
 %token K_BUSPIRATE
@@ -462,6 +464,12 @@
     }
   } |
 
+  K_TYPE TKN_EQUAL K_BLUEC {
+    { 
+      bluec_initpgm(current_prog);
+    }
+  } |
+
   K_TYPE TKN_EQUAL K_BUSPIRATE {
     {
       buspirate_initpgm(current_prog);
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/doc/avrdude.texi avrdude-5.11.1.bt/doc/avrdude.texi
--- avrdude-5.11.1.upstream/doc/avrdude.texi	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/doc/avrdude.texi	2012-12-30 20:57:09.000000000 +0100
@@ -221,6 +221,11 @@
 The Arduino (which is very similar to the STK500 1.x) is supported via
 its own programmer type specification ``arduino''.
 
+The BlueController ("bluec") is also very similar to the STK500 1.x but uses
+a performances optimized transfer mechanism for page read/write. Actually
+the BlueController hardware can be also used with the STK500 1.x or Arduino 
+programmer type but with a much lower speed.
+
 The BusPirate is a versatile tool that can also be used as an AVR programmer.
 A single BusPirate can be connected to up to 3 independent AVRs. See
 the section on
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/lexer.l avrdude-5.11.1.bt/lexer.l
--- avrdude-5.11.1.upstream/lexer.l	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/lexer.l	2012-12-30 20:57:09.000000000 +0100
@@ -126,6 +126,7 @@
 bank_size        { yylval=NULL; return K_PAGE_SIZE; }
 banked           { yylval=NULL; return K_PAGED; }
 baudrate         { yylval=NULL; return K_BAUDRATE; }
+bluec            { yylval=NULL; return K_BLUEC; }
 bs2              { yylval=NULL; return K_BS2; }
 buff             { yylval=NULL; return K_BUFF; }
 buspirate        { yylval=NULL; return K_BUSPIRATE; }
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/stk500.c avrdude-5.11.1.bt/stk500.c
--- avrdude-5.11.1.upstream/stk500.c	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/stk500.c	2013-01-08 22:53:42.000000000 +0100
@@ -41,6 +41,7 @@
 #include "avr.h"
 #include "pgm.h"
 #include "stk500_private.h"
+#include "stk500.h"
 #include "serial.h"
 
 #define STK500_XTAL 7372800U
@@ -51,14 +52,13 @@
 static int stk500_is_page_empty(unsigned int address, int page_size, 
     const unsigned char *buf);
 
-
-static int stk500_send(PROGRAMMER * pgm, unsigned char * buf, size_t len)
+int stk500_send(PROGRAMMER * pgm, unsigned char * buf, size_t len)
 {
   return serial_send(&pgm->fd, buf, len);
 }
 
 
-static int stk500_recv(PROGRAMMER * pgm, unsigned char * buf, size_t len)
+int stk500_recv(PROGRAMMER * pgm, unsigned char * buf, size_t len)
 {
   int rv;
 
@@ -739,7 +739,7 @@
 }
 
 
-static int stk500_paged_write(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, 
+int stk500_paged_write(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, 
                               int page_size, int n_bytes)
 {
   unsigned char buf[page_size + 16];
@@ -885,7 +885,7 @@
     return(1);
 }
 
-static int stk500_paged_load(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, 
+int stk500_paged_load(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, 
                              int page_size, int n_bytes)
 {
   unsigned char buf[16];
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/stk500.h avrdude-5.11.1.bt/stk500.h
--- avrdude-5.11.1.upstream/stk500.h	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/stk500.h	2013-01-08 22:51:55.000000000 +0100
@@ -32,6 +32,12 @@
 int stk500_getsync(PROGRAMMER * pgm);
 int stk500_drain(PROGRAMMER * pgm, int display);
 
+/* used by bluec.c to avoid duplicate code */
+int stk500_send(PROGRAMMER * pgm, unsigned char * buf, size_t len);
+int stk500_recv(PROGRAMMER * pgm, unsigned char * buf, size_t len);
+int stk500_paged_load(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, int page_size, int n_bytes);
+int stk500_paged_write(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m, int page_size, int n_bytes);
+
 #ifdef __cplusplus
 }
 #endif
diff -x lexer.c -x '*.a' -x config_gram.h -x config_gram.c -x config.log -x config.status -x '*.tmp' -x avrdude.conf -x '*.o' -x avrdude -x ac_cfg.h -x .DS_Store -x Makefile -x autom4te.cache -x '*.Po' -x '*.swp' -x .vimrc -x '*.ods' -x 'testburn*.sh' -x '*.hex' -x Makefile.in -x 'Makefile.new*' -x '*RFComm*' -x '*RingBuffer*' -x '*.m' -x '*~' -x ac_cfg.h.in -x aclocal.m4 -x avrdude.spec -x configure -x avrdude.info -x version.texi -x 'stamp-*' -Naur avrdude-5.11.1.upstream/stk500_private.h avrdude-5.11.1.bt/stk500_private.h
--- avrdude-5.11.1.upstream/stk500_private.h	2012-12-30 20:57:09.000000000 +0100
+++ avrdude-5.11.1.bt/stk500_private.h	2012-12-30 20:57:09.000000000 +0100
@@ -66,6 +66,25 @@
 #define Cmnd_STK_READ_FUSE_EXT     0x77  // ' '		
 #define Cmnd_STK_READ_OSCCAL_EXT   0x78  // ' '     
 
+// bulk mode extension
+// TODO: move to other location in file
+// TODO: maybe rename 'Optn' to 'Flag'
+// TODO: check if the chosen Cmnd and Resp values overlap with any other protocol extensions
+#define Optn_STK_BULK_WRITE_VERIFY     0x01  // auto verify after write
+#define Optn_STK_BULK_WRITE_CRC_CHECK  0x02  // crc check for the BULK_WRITE_DATA command
+#define Optn_STK_BULK_WRITE_RLE        0x04  // run-length compression for the BULK_WRITE_DATA command
+#define Optn_STK_BULK_WRITE_BYTE_ADR   0x08  // use Byte Programming mode instead of Page Programming mode
+#define Cmnd_STK_BULK_WRITE_START      0xC0  // ' '     
+#define Cmnd_STK_BULK_WRITE_END        0xC1  // ' '     
+#define Cmnd_STK_BULK_WRITE_DATA       0xC2  // ' '     
+#define Cmnd_STK_BULK_SET_BYTEADDR     0xC3  // ' '     
+#define Resp_STK_BULK_WRITE_START_ACK  0xD0  // ' '     
+#define Resp_STK_BULK_WRITE_END_ACK    0xD1  // ' '     
+#define Resp_STK_BULK_WRITE_ACK        0xD2  // ' '     
+#define Resp_STK_BULK_WRITE_VRFY_ERR   0xD3  // ' '     
+#define Stat_STK_BULK_ACKSTATE_ACK     0x00
+#define Stat_STK_BULK_ACKSTATE_NAK     0x01
+
 // *****************[ STK Parameter constants ]***************************
 
 #define Parm_STK_HW_VER            0x80  // ' ' - R
