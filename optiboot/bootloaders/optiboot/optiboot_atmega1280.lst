
optiboot_atmega1280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d8  0001fc00  0001fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005f  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000261  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000181  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000440  00000000  00000000  00000695  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000012e  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000283  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000f09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <main>:
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
   1fc00:	11 24       	eor	r1, r1
#endif

  uint8_t ch;

  // Adaboot no-wait mod
  ch = MCUSR;
   1fc02:	14 b7       	in	r17, 0x34	; 52
  MCUSR = 0;
   1fc04:	14 be       	out	0x34, r1	; 52
  //if (!(ch & _BV(EXTRF))) appStart();

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
   1fc06:	8e e0       	ldi	r24, 0x0E	; 14
   1fc08:	cc d0       	rcall	.+408    	; 0x1fda2 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc0a:	85 e0       	ldi	r24, 0x05	; 5
   1fc0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
   1fc10:	82 e0       	ldi	r24, 0x02	; 2
   1fc12:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
   1fc16:	88 e1       	ldi	r24, 0x18	; 24
   1fc18:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
   1fc1c:	86 e0       	ldi	r24, 0x06	; 6
   1fc1e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc22:	80 e1       	ldi	r24, 0x10	; 16
   1fc24:	80 93 c4 00 	sts	0x00C4, r24
  {
    if (!(ch & _BV(EXTRF)))
      appStart();
  }
#else
    if (!(ch & _BV(EXTRF)))
   1fc28:	11 ff       	sbrs	r17, 1
      appStart();
   1fc2a:	c1 d0       	rcall	.+386    	; 0x1fdae <appStart>

  /* Set LED pin as output */
  LED_DDR |= LED_DDR_VAL;
   1fc2c:	27 9a       	sbi	0x04, 7	; 4
   1fc2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc30:	20 e3       	ldi	r18, 0x30	; 48
   1fc32:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
   1fc34:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc36:	30 93 85 00 	sts	0x0085, r19
   1fc3a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
   1fc3e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc40:	b0 9b       	sbis	0x16, 0	; 22
   1fc42:	fe cf       	rjmp	.-4      	; 0x1fc40 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc44:	1f 9a       	sbi	0x03, 7	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc46:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
   1fc48:	81 50       	subi	r24, 0x01	; 1
   1fc4a:	a9 f7       	brne	.-22     	; 0x1fc36 <main+0x36>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
   1fc4c:	cc 24       	eor	r12, r12
   1fc4e:	c3 94       	inc	r12
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
   1fc50:	a5 e0       	ldi	r26, 0x05	; 5
   1fc52:	ba 2e       	mov	r11, r26
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
   1fc54:	f1 e1       	ldi	r31, 0x11	; 17
   1fc56:	df 2e       	mov	r13, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc58:	9c d0       	rcall	.+312    	; 0x1fd92 <getch>
      verifySpace();
      blueCAvrdudeSynced = 1;
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
   1fc5a:	81 34       	cpi	r24, 0x41	; 65
   1fc5c:	19 f4       	brne	.+6      	; 0x1fc64 <main+0x64>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
   1fc5e:	81 e0       	ldi	r24, 0x01	; 1
   1fc60:	b3 d0       	rcall	.+358    	; 0x1fdc8 <getNch>
   1fc62:	85 c0       	rjmp	.+266    	; 0x1fd6e <main+0x16e>
      putch(0x03);
    }
    else if(ch == STK_SET_DEVICE) {
   1fc64:	82 34       	cpi	r24, 0x42	; 66
   1fc66:	11 f4       	brne	.+4      	; 0x1fc6c <main+0x6c>
      // SET DEVICE is ignored
      getNch(20);
   1fc68:	84 e1       	ldi	r24, 0x14	; 20
   1fc6a:	03 c0       	rjmp	.+6      	; 0x1fc72 <main+0x72>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
   1fc6c:	85 34       	cpi	r24, 0x45	; 69
   1fc6e:	19 f4       	brne	.+6      	; 0x1fc76 <main+0x76>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc70:	85 e0       	ldi	r24, 0x05	; 5
   1fc72:	aa d0       	rcall	.+340    	; 0x1fdc8 <getNch>
   1fc74:	83 c0       	rjmp	.+262    	; 0x1fd7c <main+0x17c>
    }
    else if(ch == STK_LOAD_ADDRESS) {
   1fc76:	85 35       	cpi	r24, 0x55	; 85
   1fc78:	91 f4       	brne	.+36     	; 0x1fc9e <main+0x9e>
      // LOAD ADDRESS
      address = getch();
   1fc7a:	8b d0       	rcall	.+278    	; 0x1fd92 <getch>
      address = (address & 0xff) | (getch() << 8);
   1fc7c:	08 2f       	mov	r16, r24
   1fc7e:	10 e0       	ldi	r17, 0x00	; 0
   1fc80:	88 d0       	rcall	.+272    	; 0x1fd92 <getch>
   1fc82:	90 e0       	ldi	r25, 0x00	; 0
   1fc84:	98 2f       	mov	r25, r24
   1fc86:	88 27       	eor	r24, r24
   1fc88:	80 2b       	or	r24, r16
   1fc8a:	91 2b       	or	r25, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
   1fc8c:	29 2f       	mov	r18, r25
   1fc8e:	22 1f       	adc	r18, r18
   1fc90:	22 27       	eor	r18, r18
   1fc92:	22 1f       	adc	r18, r18
   1fc94:	2b bf       	out	0x3b, r18	; 59
#endif
      address += address; // Convert from word address to byte address
   1fc96:	7c 01       	movw	r14, r24
   1fc98:	ee 0c       	add	r14, r14
   1fc9a:	ff 1c       	adc	r15, r15
   1fc9c:	6e c0       	rjmp	.+220    	; 0x1fd7a <main+0x17a>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
   1fc9e:	86 35       	cpi	r24, 0x56	; 86
   1fca0:	29 f4       	brne	.+10     	; 0x1fcac <main+0xac>
      // UNIVERSAL command is ignored
      getNch(4);
   1fca2:	84 e0       	ldi	r24, 0x04	; 4
   1fca4:	91 d0       	rcall	.+290    	; 0x1fdc8 <getNch>
      putch(0x00);
   1fca6:	80 e0       	ldi	r24, 0x00	; 0
   1fca8:	6c d0       	rcall	.+216    	; 0x1fd82 <putch>
   1fcaa:	68 c0       	rjmp	.+208    	; 0x1fd7c <main+0x17c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
   1fcac:	84 36       	cpi	r24, 0x64	; 100
   1fcae:	09 f0       	breq	.+2      	; 0x1fcb2 <main+0xb2>
   1fcb0:	41 c0       	rjmp	.+130    	; 0x1fd34 <main+0x134>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
   1fcb2:	6f d0       	rcall	.+222    	; 0x1fd92 <getch>
      length = getch();
   1fcb4:	6e d0       	rcall	.+220    	; 0x1fd92 <getch>
   1fcb6:	18 2f       	mov	r17, r24
      getch();
   1fcb8:	6c d0       	rcall	.+216    	; 0x1fd92 <getch>

      // If we are in RWW section, immediately start page erase
#if !defined(BLUECONTROLLER) 
      if (address < NRWWSTART)
   1fcba:	80 e0       	ldi	r24, 0x00	; 0
   1fcbc:	e8 16       	cp	r14, r24
   1fcbe:	80 ee       	ldi	r24, 0xE0	; 224
   1fcc0:	f8 06       	cpc	r15, r24
   1fcc2:	20 f4       	brcc	.+8      	; 0x1fccc <main+0xcc>
        __boot_page_erase_short((uint16_t)(void*)address);
   1fcc4:	83 e0       	ldi	r24, 0x03	; 3
   1fcc6:	f7 01       	movw	r30, r14
   1fcc8:	87 bf       	out	0x37, r24	; 55
   1fcca:	e8 95       	spm
   1fccc:	c2 e0       	ldi	r28, 0x02	; 2
   1fcce:	d2 e0       	ldi	r29, 0x02	; 2
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
   1fcd0:	60 d0       	rcall	.+192    	; 0x1fd92 <getch>
   1fcd2:	89 93       	st	Y+, r24
      while (--length);
   1fcd4:	11 50       	subi	r17, 0x01	; 1
   1fcd6:	e1 f7       	brne	.-8      	; 0x1fcd0 <main+0xd0>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(BLUECONTROLLER) 
      if (address >= NRWWSTART)
   1fcd8:	f0 e0       	ldi	r31, 0x00	; 0
   1fcda:	ef 16       	cp	r14, r31
   1fcdc:	f0 ee       	ldi	r31, 0xE0	; 224
   1fcde:	ff 06       	cpc	r15, r31
   1fce0:	20 f0       	brcs	.+8      	; 0x1fcea <main+0xea>
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
   1fce2:	83 e0       	ldi	r24, 0x03	; 3
   1fce4:	f7 01       	movw	r30, r14
   1fce6:	87 bf       	out	0x37, r24	; 55
   1fce8:	e8 95       	spm
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
   1fcea:	07 b6       	in	r0, 0x37	; 55
   1fcec:	00 fc       	sbrc	r0, 0
   1fcee:	fd cf       	rjmp	.-6      	; 0x1fcea <main+0xea>
   1fcf0:	a7 01       	movw	r20, r14
   1fcf2:	a2 e0       	ldi	r26, 0x02	; 2
   1fcf4:	b2 e0       	ldi	r27, 0x02	; 2
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
   1fcf6:	2c 91       	ld	r18, X
   1fcf8:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
   1fcfa:	11 96       	adiw	r26, 0x01	; 1
   1fcfc:	8c 91       	ld	r24, X
   1fcfe:	11 97       	sbiw	r26, 0x01	; 1
   1fd00:	90 e0       	ldi	r25, 0x00	; 0
   1fd02:	98 2f       	mov	r25, r24
   1fd04:	88 27       	eor	r24, r24
   1fd06:	82 2b       	or	r24, r18
   1fd08:	93 2b       	or	r25, r19
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
   1fd0a:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fd0c:	fa 01       	movw	r30, r20
   1fd0e:	0c 01       	movw	r0, r24
   1fd10:	c7 be       	out	0x37, r12	; 55
   1fd12:	e8 95       	spm
   1fd14:	11 24       	eor	r1, r1
        addrPtr += 2;
   1fd16:	4e 5f       	subi	r20, 0xFE	; 254
   1fd18:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
   1fd1a:	f3 e0       	ldi	r31, 0x03	; 3
   1fd1c:	a2 30       	cpi	r26, 0x02	; 2
   1fd1e:	bf 07       	cpc	r27, r31
   1fd20:	51 f7       	brne	.-44     	; 0x1fcf6 <main+0xf6>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
   1fd22:	f7 01       	movw	r30, r14
   1fd24:	b7 be       	out	0x37, r11	; 55
   1fd26:	e8 95       	spm
      boot_spm_busy_wait();
   1fd28:	07 b6       	in	r0, 0x37	; 55
   1fd2a:	00 fc       	sbrc	r0, 0
   1fd2c:	fd cf       	rjmp	.-6      	; 0x1fd28 <main+0x128>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
   1fd2e:	d7 be       	out	0x37, r13	; 55
   1fd30:	e8 95       	spm
   1fd32:	23 c0       	rjmp	.+70     	; 0x1fd7a <main+0x17a>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
   1fd34:	84 37       	cpi	r24, 0x74	; 116
   1fd36:	a1 f4       	brne	.+40     	; 0x1fd60 <main+0x160>
      // READ PAGE - we only read flash

      getch();			/* getlen */
   1fd38:	2c d0       	rcall	.+88     	; 0x1fd92 <getch>
      length = getch();
   1fd3a:	2b d0       	rcall	.+86     	; 0x1fd92 <getch>
   1fd3c:	08 2f       	mov	r16, r24
      getch();
   1fd3e:	29 d0       	rcall	.+82     	; 0x1fd92 <getch>

      verifySpace();
   1fd40:	3d d0       	rcall	.+122    	; 0x1fdbc <verifySpace>
   1fd42:	e7 01       	movw	r28, r14
   1fd44:	10 2f       	mov	r17, r16
#ifdef __AVR_ATmega1280__
//      do putch(pgm_read_byte_near(address++));
//      while (--length);
      do {
        uint8_t result;
        __asm__ ("elpm %0,Z\n":"=r"(result):"z"(address));
   1fd46:	fe 01       	movw	r30, r28
   1fd48:	86 91       	elpm	r24, Z+
        putch(result);
   1fd4a:	1b d0       	rcall	.+54     	; 0x1fd82 <putch>
        address++;
   1fd4c:	21 96       	adiw	r28, 0x01	; 1
      }
      while (--length);
   1fd4e:	11 50       	subi	r17, 0x01	; 1
   1fd50:	d1 f7       	brne	.-12     	; 0x1fd46 <main+0x146>
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
   1fd52:	08 94       	sec
   1fd54:	e1 1c       	adc	r14, r1
   1fd56:	f1 1c       	adc	r15, r1
   1fd58:	01 50       	subi	r16, 0x01	; 1
   1fd5a:	e0 0e       	add	r14, r16
   1fd5c:	f1 1c       	adc	r15, r1
   1fd5e:	0e c0       	rjmp	.+28     	; 0x1fd7c <main+0x17c>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
   1fd60:	85 37       	cpi	r24, 0x75	; 117
   1fd62:	39 f4       	brne	.+14     	; 0x1fd72 <main+0x172>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fd64:	2b d0       	rcall	.+86     	; 0x1fdbc <verifySpace>
      putch(SIGNATURE_0);
   1fd66:	8e e1       	ldi	r24, 0x1E	; 30
   1fd68:	0c d0       	rcall	.+24     	; 0x1fd82 <putch>
      putch(SIGNATURE_1);
   1fd6a:	87 e9       	ldi	r24, 0x97	; 151
   1fd6c:	0a d0       	rcall	.+20     	; 0x1fd82 <putch>
      putch(SIGNATURE_2);
   1fd6e:	83 e0       	ldi	r24, 0x03	; 3
   1fd70:	9b cf       	rjmp	.-202    	; 0x1fca8 <main+0xa8>
    }
    else if (ch == 'Q') {
   1fd72:	81 35       	cpi	r24, 0x51	; 81
   1fd74:	11 f4       	brne	.+4      	; 0x1fd7a <main+0x17a>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1fd76:	88 e0       	ldi	r24, 0x08	; 8
   1fd78:	14 d0       	rcall	.+40     	; 0x1fda2 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fd7a:	20 d0       	rcall	.+64     	; 0x1fdbc <verifySpace>
    }
    putch(STK_OK);
   1fd7c:	80 e1       	ldi	r24, 0x10	; 16
   1fd7e:	01 d0       	rcall	.+2      	; 0x1fd82 <putch>
   1fd80:	6b cf       	rjmp	.-298    	; 0x1fc58 <main+0x58>

0001fd82 <putch>:
  }
}

void putch(char ch) {
   1fd82:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
   1fd84:	80 91 c0 00 	lds	r24, 0x00C0
   1fd88:	85 ff       	sbrs	r24, 5
   1fd8a:	fc cf       	rjmp	.-8      	; 0x1fd84 <putch+0x2>
  UDR0 = ch;
   1fd8c:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
   1fd90:	08 95       	ret

0001fd92 <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fd92:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
   1fd94:	80 91 c0 00 	lds	r24, 0x00C0
   1fd98:	87 ff       	sbrs	r24, 7
   1fd9a:	fc cf       	rjmp	.-8      	; 0x1fd94 <getch+0x2>
#if defined(BLUECONTROLLER) 
    extendWatchdogPeriodAfterStartup();
#endif
  }

  ch = UDR0;
   1fd9c:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fda0:	08 95       	ret

0001fda2 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fda2:	e0 e6       	ldi	r30, 0x60	; 96
   1fda4:	f0 e0       	ldi	r31, 0x00	; 0
   1fda6:	98 e1       	ldi	r25, 0x18	; 24
   1fda8:	90 83       	st	Z, r25
  WDTCSR = x;
   1fdaa:	80 83       	st	Z, r24
}
   1fdac:	08 95       	ret

0001fdae <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
   1fdae:	27 9a       	sbi	0x04, 7	; 4
  LED_PORT &= ~_BV(LED); // switch LED off
   1fdb0:	2f 98       	cbi	0x05, 7	; 5
  watchdogConfig(WATCHDOG_OFF);
   1fdb2:	80 e0       	ldi	r24, 0x00	; 0
   1fdb4:	f6 df       	rcall	.-20     	; 0x1fda2 <watchdogConfig>
  __asm__ __volatile__ (
   1fdb6:	ee 27       	eor	r30, r30
   1fdb8:	ff 27       	eor	r31, r31
   1fdba:	09 94       	ijmp

0001fdbc <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
   1fdbc:	ea df       	rcall	.-44     	; 0x1fd92 <getch>
   1fdbe:	80 32       	cpi	r24, 0x20	; 32
   1fdc0:	11 f4       	brne	.+4      	; 0x1fdc6 <verifySpace+0xa>
  {
    putch(STK_INSYNC);
   1fdc2:	84 e1       	ldi	r24, 0x14	; 20
   1fdc4:	de cf       	rjmp	.-68     	; 0x1fd82 <putch>
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage will exit the bootloader
    if(blueCAvrdudeSynced)
      appStart();
#else
    appStart();
   1fdc6:	f3 cf       	rjmp	.-26     	; 0x1fdae <appStart>

0001fdc8 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fdc8:	1f 93       	push	r17
   1fdca:	18 2f       	mov	r17, r24
  do getch(); while (--count);
   1fdcc:	e2 df       	rcall	.-60     	; 0x1fd92 <getch>
   1fdce:	11 50       	subi	r17, 0x01	; 1
   1fdd0:	e9 f7       	brne	.-6      	; 0x1fdcc <getNch+0x4>
  verifySpace();
   1fdd2:	f4 df       	rcall	.-24     	; 0x1fdbc <verifySpace>
}
   1fdd4:	1f 91       	pop	r17
   1fdd6:	08 95       	ret
