
optiboot_luminet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00001d00  00001d00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000006d  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000291  00000000  00000000  00000329  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018c  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000047c  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000013c  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000221  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000080  00000000  00000000  00000fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001d00 <main>:
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    1d00:	11 24       	eor	r1, r1
#endif

  uint8_t ch;

  // Adaboot no-wait mod
  ch = MCUSR;
    1d02:	14 b7       	in	r17, 0x34	; 52
  MCUSR = 0;
    1d04:	14 be       	out	0x34, r1	; 52
  //if (!(ch & _BV(EXTRF))) appStart();

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    1d06:	8e e0       	ldi	r24, 0x0E	; 14
    1d08:	02 d1       	rcall	.+516    	; 0x1f0e <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1d0a:	85 e0       	ldi	r24, 0x05	; 5
    1d0c:	8e bd       	out	0x2e, r24	; 46
  {
    if (!(ch & _BV(EXTRF)))
      appStart();
  }
#else
    if (!(ch & _BV(EXTRF)))
    1d0e:	11 ff       	sbrs	r17, 1
      appStart();
    1d10:	02 d1       	rcall	.+516    	; 0x1f16 <appStart>

  /* Set LED pin as output */
  LED_DDR |= LED_DDR_VAL;
    1d12:	d4 9a       	sbi	0x1a, 4	; 26
#endif

#ifdef SOFT_UART
  /* Set TX pin as output */
  UART_DDR |= _BV(UART_TX_BIT);
    1d14:	d2 9a       	sbi	0x1a, 2	; 26
    1d16:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1d18:	23 ec       	ldi	r18, 0xC3	; 195
    1d1a:	3f ef       	ldi	r19, 0xFF	; 255
    TIFR1 = _BV(TOV1);
    1d1c:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1d1e:	3d bd       	out	0x2d, r19	; 45
    1d20:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
    1d22:	9b b9       	out	0x0b, r25	; 11
    while(!(TIFR1 & _BV(TOV1)));
    1d24:	58 9b       	sbis	0x0b, 0	; 11
    1d26:	fe cf       	rjmp	.-4      	; 0x1d24 <main+0x24>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    1d28:	cc 9a       	sbi	0x19, 4	; 25
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1d2a:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    1d2c:	81 50       	subi	r24, 0x01	; 1
    1d2e:	b9 f7       	brne	.-18     	; 0x1d1e <main+0x1e>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    1d30:	99 24       	eor	r9, r9
    1d32:	93 94       	inc	r9
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1d34:	85 e0       	ldi	r24, 0x05	; 5
    1d36:	88 2e       	mov	r8, r24
        vect -= 4; // Instruction is a relative jump (rjmp), so recalculate.
        buff[8] = vect & 0xff;
        buff[9] = vect >> 8;

        // Add jump to bootloader at RESET vector
        buff[0] = 0x7f;
    1d38:	0f e7       	ldi	r16, 0x7F	; 127
    1d3a:	b0 2e       	mov	r11, r16
        buff[1] = 0xce; // rjmp 0x1d00 instruction
    1d3c:	1e ec       	ldi	r17, 0xCE	; 206
    1d3e:	a1 2e       	mov	r10, r17
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1d40:	d2 d0       	rcall	.+420    	; 0x1ee6 <getch>
      verifySpace();
      blueCAvrdudeSynced = 1;
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
    1d42:	81 34       	cpi	r24, 0x41	; 65
    1d44:	21 f4       	brne	.+8      	; 0x1d4e <main+0x4e>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	f3 d0       	rcall	.+486    	; 0x1f30 <getNch>
      putch(0x03);
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	1c c0       	rjmp	.+56     	; 0x1d86 <main+0x86>
    }
    else if(ch == STK_SET_DEVICE) {
    1d4e:	82 34       	cpi	r24, 0x42	; 66
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <main+0x56>
      // SET DEVICE is ignored
      getNch(20);
    1d52:	84 e1       	ldi	r24, 0x14	; 20
    1d54:	03 c0       	rjmp	.+6      	; 0x1d5c <main+0x5c>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1d56:	85 34       	cpi	r24, 0x45	; 69
    1d58:	19 f4       	brne	.+6      	; 0x1d60 <main+0x60>
      // SET DEVICE EXT is ignored
      getNch(5);
    1d5a:	85 e0       	ldi	r24, 0x05	; 5
    1d5c:	e9 d0       	rcall	.+466    	; 0x1f30 <getNch>
    1d5e:	b1 c0       	rjmp	.+354    	; 0x1ec2 <main+0x1c2>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1d60:	85 35       	cpi	r24, 0x55	; 85
    1d62:	61 f4       	brne	.+24     	; 0x1d7c <main+0x7c>
      // LOAD ADDRESS
      address = getch();
    1d64:	c0 d0       	rcall	.+384    	; 0x1ee6 <getch>
      address = (address & 0xff) | (getch() << 8);
    1d66:	08 2f       	mov	r16, r24
    1d68:	10 e0       	ldi	r17, 0x00	; 0
    1d6a:	bd d0       	rcall	.+378    	; 0x1ee6 <getch>
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	f8 2e       	mov	r15, r24
    1d70:	ee 24       	eor	r14, r14
    1d72:	e0 2a       	or	r14, r16
    1d74:	f1 2a       	or	r15, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
#endif
      address += address; // Convert from word address to byte address
    1d76:	ee 0c       	add	r14, r14
    1d78:	ff 1c       	adc	r15, r15
    1d7a:	a2 c0       	rjmp	.+324    	; 0x1ec0 <main+0x1c0>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    1d7c:	86 35       	cpi	r24, 0x56	; 86
    1d7e:	29 f4       	brne	.+10     	; 0x1d8a <main+0x8a>
      // UNIVERSAL command is ignored
      getNch(4);
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	d6 d0       	rcall	.+428    	; 0x1f30 <getNch>
      putch(0x00);
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	a0 d0       	rcall	.+320    	; 0x1ec8 <putch>
    1d88:	9c c0       	rjmp	.+312    	; 0x1ec2 <main+0x1c2>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1d8a:	84 36       	cpi	r24, 0x64	; 100
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <main+0x90>
    1d8e:	5c c0       	rjmp	.+184    	; 0x1e48 <main+0x148>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    1d90:	aa d0       	rcall	.+340    	; 0x1ee6 <getch>
      length = getch();
    1d92:	a9 d0       	rcall	.+338    	; 0x1ee6 <getch>
    1d94:	18 2f       	mov	r17, r24
      getch();
    1d96:	a7 d0       	rcall	.+334    	; 0x1ee6 <getch>
    1d98:	c2 e0       	ldi	r28, 0x02	; 2
    1d9a:	d1 e0       	ldi	r29, 0x01	; 1
        __boot_page_erase_short((uint16_t)(void*)address);
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1d9c:	a4 d0       	rcall	.+328    	; 0x1ee6 <getch>
    1d9e:	89 93       	st	Y+, r24
      while (--length);
    1da0:	11 50       	subi	r17, 0x01	; 1
    1da2:	e1 f7       	brne	.-8      	; 0x1d9c <main+0x9c>
      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(NRWWSECTIONFAVORSIZE) 
      if (!((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8)))
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    1da4:	83 e0       	ldi	r24, 0x03	; 3
    1da6:	f7 01       	movw	r30, r14
    1da8:	87 bf       	out	0x37, r24	; 55
    1daa:	e8 95       	spm

#ifdef VIRTUAL_BOOT_PARTITION
      if ((uint16_t)(void*)address == 0) {
    1dac:	e1 14       	cp	r14, r1
    1dae:	f1 04       	cpc	r15, r1
    1db0:	41 f5       	brne	.+80     	; 0x1e02 <main+0x102>
        // This is the reset vector page. We need to live-patch the code so the
        // bootloader runs.
        //
        // Move RESET vector to WDT vector
        uint16_t vect = buff[0] | (buff[1]<<8);
    1db2:	80 91 02 01 	lds	r24, 0x0102
    1db6:	20 91 03 01 	lds	r18, 0x0103
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	32 2f       	mov	r19, r18
    1dbe:	22 27       	eor	r18, r18
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	28 2b       	or	r18, r24
    1dc4:	39 2b       	or	r19, r25
        rstVect = vect;
    1dc6:	30 93 87 01 	sts	0x0187, r19
    1dca:	20 93 86 01 	sts	0x0186, r18
        wdtVect = buff[8] | (buff[9]<<8);
    1dce:	40 91 0a 01 	lds	r20, 0x010A
    1dd2:	80 91 0b 01 	lds	r24, 0x010B
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	98 2f       	mov	r25, r24
    1dda:	88 27       	eor	r24, r24
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	84 2b       	or	r24, r20
    1de0:	95 2b       	or	r25, r21
    1de2:	90 93 89 01 	sts	0x0189, r25
    1de6:	80 93 88 01 	sts	0x0188, r24
        vect -= 4; // Instruction is a relative jump (rjmp), so recalculate.
    1dea:	24 50       	subi	r18, 0x04	; 4
    1dec:	30 40       	sbci	r19, 0x00	; 0
        buff[8] = vect & 0xff;
    1dee:	20 93 0a 01 	sts	0x010A, r18
        buff[9] = vect >> 8;
    1df2:	23 2f       	mov	r18, r19
    1df4:	33 27       	eor	r19, r19
    1df6:	20 93 0b 01 	sts	0x010B, r18

        // Add jump to bootloader at RESET vector
        buff[0] = 0x7f;
    1dfa:	b0 92 02 01 	sts	0x0102, r11
        buff[1] = 0xce; // rjmp 0x1d00 instruction
    1dfe:	a0 92 03 01 	sts	0x0103, r10
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    1e02:	07 b6       	in	r0, 0x37	; 55
    1e04:	00 fc       	sbrc	r0, 0
    1e06:	fd cf       	rjmp	.-6      	; 0x1e02 <main+0x102>
    1e08:	a7 01       	movw	r20, r14
    1e0a:	a2 e0       	ldi	r26, 0x02	; 2
    1e0c:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    1e0e:	2c 91       	ld	r18, X
    1e10:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    1e12:	11 96       	adiw	r26, 0x01	; 1
    1e14:	8c 91       	ld	r24, X
    1e16:	11 97       	sbiw	r26, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	98 2f       	mov	r25, r24
    1e1c:	88 27       	eor	r24, r24
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    1e22:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1e24:	fa 01       	movw	r30, r20
    1e26:	0c 01       	movw	r0, r24
    1e28:	97 be       	out	0x37, r9	; 55
    1e2a:	e8 95       	spm
    1e2c:	11 24       	eor	r1, r1
        addrPtr += 2;
    1e2e:	4e 5f       	subi	r20, 0xFE	; 254
    1e30:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    1e32:	f1 e0       	ldi	r31, 0x01	; 1
    1e34:	a2 34       	cpi	r26, 0x42	; 66
    1e36:	bf 07       	cpc	r27, r31
    1e38:	51 f7       	brne	.-44     	; 0x1e0e <main+0x10e>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1e3a:	f7 01       	movw	r30, r14
    1e3c:	87 be       	out	0x37, r8	; 55
    1e3e:	e8 95       	spm
      boot_spm_busy_wait();
    1e40:	07 b6       	in	r0, 0x37	; 55
    1e42:	00 fc       	sbrc	r0, 0
    1e44:	fd cf       	rjmp	.-6      	; 0x1e40 <main+0x140>
    1e46:	3c c0       	rjmp	.+120    	; 0x1ec0 <main+0x1c0>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1e48:	84 37       	cpi	r24, 0x74	; 116
    1e4a:	69 f5       	brne	.+90     	; 0x1ea6 <main+0x1a6>
      // READ PAGE - we only read flash

      getch();			/* getlen */
    1e4c:	4c d0       	rcall	.+152    	; 0x1ee6 <getch>
      length = getch();
    1e4e:	4b d0       	rcall	.+150    	; 0x1ee6 <getch>
    1e50:	c8 2e       	mov	r12, r24
      getch();
    1e52:	49 d0       	rcall	.+146    	; 0x1ee6 <getch>

      verifySpace();
    1e54:	67 d0       	rcall	.+206    	; 0x1f24 <verifySpace>
    1e56:	87 01       	movw	r16, r14
    1e58:	dc 2c       	mov	r13, r12
#ifdef VIRTUAL_BOOT_PARTITION
      do {
        // Undo vector patch in bottom page so verify passes
        if (address == 0)       ch=rstVect & 0xff;
    1e5a:	01 15       	cp	r16, r1
    1e5c:	11 05       	cpc	r17, r1
    1e5e:	19 f4       	brne	.+6      	; 0x1e66 <main+0x166>
    1e60:	80 91 86 01 	lds	r24, 0x0186
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <main+0x18e>
        else if (address == 1)  ch=rstVect >> 8;
    1e66:	01 30       	cpi	r16, 0x01	; 1
    1e68:	11 05       	cpc	r17, r1
    1e6a:	19 f4       	brne	.+6      	; 0x1e72 <main+0x172>
    1e6c:	80 91 87 01 	lds	r24, 0x0187
    1e70:	0e c0       	rjmp	.+28     	; 0x1e8e <main+0x18e>
        else if (address == 8)  ch=wdtVect & 0xff;
    1e72:	08 30       	cpi	r16, 0x08	; 8
    1e74:	11 05       	cpc	r17, r1
    1e76:	19 f4       	brne	.+6      	; 0x1e7e <main+0x17e>
    1e78:	80 91 88 01 	lds	r24, 0x0188
    1e7c:	08 c0       	rjmp	.+16     	; 0x1e8e <main+0x18e>
        else if (address == 9) ch=wdtVect >> 8;
    1e7e:	09 30       	cpi	r16, 0x09	; 9
    1e80:	11 05       	cpc	r17, r1
    1e82:	19 f4       	brne	.+6      	; 0x1e8a <main+0x18a>
    1e84:	80 91 89 01 	lds	r24, 0x0189
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <main+0x18e>
        else ch = pgm_read_byte_near(address);
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	84 91       	lpm	r24, Z+
        address++;
    1e8e:	0f 5f       	subi	r16, 0xFF	; 255
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
        putch(ch);
    1e92:	1a d0       	rcall	.+52     	; 0x1ec8 <putch>
      } while (--length);
    1e94:	da 94       	dec	r13
    1e96:	09 f7       	brne	.-62     	; 0x1e5a <main+0x15a>
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    1e98:	08 94       	sec
    1e9a:	e1 1c       	adc	r14, r1
    1e9c:	f1 1c       	adc	r15, r1
    1e9e:	ca 94       	dec	r12
    1ea0:	ec 0c       	add	r14, r12
    1ea2:	f1 1c       	adc	r15, r1
    1ea4:	0e c0       	rjmp	.+28     	; 0x1ec2 <main+0x1c2>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1ea6:	85 37       	cpi	r24, 0x75	; 117
    1ea8:	39 f4       	brne	.+14     	; 0x1eb8 <main+0x1b8>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1eaa:	3c d0       	rcall	.+120    	; 0x1f24 <verifySpace>
      putch(SIGNATURE_0);
    1eac:	8e e1       	ldi	r24, 0x1E	; 30
    1eae:	0c d0       	rcall	.+24     	; 0x1ec8 <putch>
      putch(SIGNATURE_1);
    1eb0:	83 e9       	ldi	r24, 0x93	; 147
    1eb2:	0a d0       	rcall	.+20     	; 0x1ec8 <putch>
      putch(SIGNATURE_2);
    1eb4:	8c e0       	ldi	r24, 0x0C	; 12
    1eb6:	67 cf       	rjmp	.-306    	; 0x1d86 <main+0x86>
    }
    else if (ch == 'Q') {
    1eb8:	81 35       	cpi	r24, 0x51	; 81
    1eba:	11 f4       	brne	.+4      	; 0x1ec0 <main+0x1c0>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1ebc:	88 e0       	ldi	r24, 0x08	; 8
    1ebe:	27 d0       	rcall	.+78     	; 0x1f0e <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1ec0:	31 d0       	rcall	.+98     	; 0x1f24 <verifySpace>
    }
    putch(STK_OK);
    1ec2:	80 e1       	ldi	r24, 0x10	; 16
    1ec4:	01 d0       	rcall	.+2      	; 0x1ec8 <putch>
    1ec6:	3c cf       	rjmp	.-392    	; 0x1d40 <main+0x40>

00001ec8 <putch>:
void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
  UDR0 = ch;
#else
  __asm__ __volatile__ (
    1ec8:	2a e0       	ldi	r18, 0x0A	; 10
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	80 95       	com	r24
    1ece:	08 94       	sec
    1ed0:	10 f4       	brcc	.+4      	; 0x1ed6 <putch+0xe>
    1ed2:	da 98       	cbi	0x1b, 2	; 27
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <putch+0x12>
    1ed6:	da 9a       	sbi	0x1b, 2	; 27
    1ed8:	00 00       	nop
    1eda:	15 d0       	rcall	.+42     	; 0x1f06 <uartDelay>
    1edc:	14 d0       	rcall	.+40     	; 0x1f06 <uartDelay>
    1ede:	86 95       	lsr	r24
    1ee0:	2a 95       	dec	r18
    1ee2:	b1 f7       	brne	.-20     	; 0x1ed0 <putch+0x8>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    1ee4:	08 95       	ret

00001ee6 <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1ee6:	a8 95       	wdr
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1ee8:	29 e0       	ldi	r18, 0x09	; 9
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	cb 99       	sbic	0x19, 3	; 25
    1eee:	fe cf       	rjmp	.-4      	; 0x1eec <getch+0x6>
    1ef0:	0a d0       	rcall	.+20     	; 0x1f06 <uartDelay>
    1ef2:	09 d0       	rcall	.+18     	; 0x1f06 <uartDelay>
    1ef4:	08 d0       	rcall	.+16     	; 0x1f06 <uartDelay>
    1ef6:	88 94       	clc
    1ef8:	cb 99       	sbic	0x19, 3	; 25
    1efa:	08 94       	sec
    1efc:	2a 95       	dec	r18
    1efe:	11 f0       	breq	.+4      	; 0x1f04 <getch+0x1e>
    1f00:	87 95       	ror	r24
    1f02:	f7 cf       	rjmp	.-18     	; 0x1ef2 <getch+0xc>
    1f04:	08 95       	ret

00001f06 <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    1f06:	9e e0       	ldi	r25, 0x0E	; 14
    1f08:	9a 95       	dec	r25
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <uartDelay+0x2>
    1f0c:	08 95       	ret

00001f0e <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f0e:	98 e1       	ldi	r25, 0x18	; 24
    1f10:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1f12:	81 bd       	out	0x21, r24	; 33
}
    1f14:	08 95       	ret

00001f16 <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
    1f16:	d4 9a       	sbi	0x1a, 4	; 26
  LED_PORT &= ~_BV(LED); // switch LED off
    1f18:	dc 98       	cbi	0x1b, 4	; 27
  watchdogConfig(WATCHDOG_OFF);
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	f8 df       	rcall	.-16     	; 0x1f0e <watchdogConfig>
  __asm__ __volatile__ (
    1f1e:	e4 e0       	ldi	r30, 0x04	; 4
    1f20:	ff 27       	eor	r31, r31
    1f22:	09 94       	ijmp

00001f24 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
    1f24:	e0 df       	rcall	.-64     	; 0x1ee6 <getch>
    1f26:	80 32       	cpi	r24, 0x20	; 32
    1f28:	11 f4       	brne	.+4      	; 0x1f2e <verifySpace+0xa>
  {
    putch(STK_INSYNC);
    1f2a:	84 e1       	ldi	r24, 0x14	; 20
    1f2c:	cd cf       	rjmp	.-102    	; 0x1ec8 <putch>
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage will exit the bootloader
    if(blueCAvrdudeSynced)
      appStart();
#else
    appStart();
    1f2e:	f3 cf       	rjmp	.-26     	; 0x1f16 <appStart>

00001f30 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1f30:	1f 93       	push	r17
    1f32:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    1f34:	d8 df       	rcall	.-80     	; 0x1ee6 <getch>
    1f36:	11 50       	subi	r17, 0x01	; 1
    1f38:	e9 f7       	brne	.-6      	; 0x1f34 <getNch+0x4>
  verifySpace();
    1f3a:	f4 df       	rcall	.-24     	; 0x1f24 <verifySpace>
}
    1f3c:	1f 91       	pop	r17
    1f3e:	08 95       	ret
