
optiboot_bluec328_8MHz_19200bps.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000087  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000026b  00000000  00000000  000002f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018c  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000461  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000164  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000244  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    7e00:	11 24       	eor	r1, r1
#endif

  uint8_t ch;

  // Adaboot no-wait mod
  ch = MCUSR;
    7e02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    7e04:	14 be       	out	0x34, r1	; 52

#if defined(BLUECONTROLLER) 
  BLUEC_BTN_PORT |= _BV(BLUEC_BTN); // enable pull-up for BlueController button 
    7e06:	5a 9a       	sbi	0x0b, 2	; 11
  //BLUEC_BT_RESET_PORT |= _BV(BLUEC_BT_RESET); // set BlueController BTM-222 RESET line to HIGH/pullup-enable
  //BLUEC_BT_RESET_DDR |= _BV(BLUEC_BT_RESET); /* set BlueController BTM-222 RESET line as output */
  blueCAvrdudeSynced = 0;
    7e08:	dd 24       	eor	r13, r13
  timOverflCnt = 0;
    7e0a:	ff 24       	eor	r15, r15

  if(!(BLUEC_BTN_PIN & _BV(BLUEC_BTN))
    7e0c:	4a 9b       	sbis	0x09, 2	; 9
    7e0e:	07 c0       	rjmp	.+14     	; 0x7e1e <main+0x1e>
    7e10:	80 91 00 01 	lds	r24, 0x0100
    7e14:	90 91 01 01 	lds	r25, 0x0101
    7e18:	8e 59       	subi	r24, 0x9E	; 158
    7e1a:	94 4c       	sbci	r25, 0xC4	; 196
    7e1c:	19 f4       	brne	.+6      	; 0x7e24 <main+0x24>
    || enterBootloaderByAppMagic == ENTER_BL_MAGIC)
  {
    enterBootloaderByAppMagicLSB = 0; // disable magic mechanism for next reset to avoid endless loop
    7e1e:	10 92 00 01 	sts	0x0100, r1
    7e22:	01 c0       	rjmp	.+2      	; 0x7e26 <main+0x26>
  }
  else
  {
    appStart();
    7e24:	cd d0       	rcall	.+410    	; 0x7fc0 <appStart>
    if (!(ch & _BV(EXTRF)))
      appStart();
#endif

  // Set up watchdog to trigger after 1000 ms
  watchdogConfig(WATCHDOG_1S);
    7e26:	8e e0       	ldi	r24, 0x0E	; 14
    7e28:	c5 d0       	rcall	.+394    	; 0x7fb4 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e2a:	85 e0       	ldi	r24, 0x05	; 5
    7e2c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    7e30:	82 e0       	ldi	r24, 0x02	; 2
    7e32:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7e36:	88 e1       	ldi	r24, 0x18	; 24
    7e38:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7e3c:	86 e0       	ldi	r24, 0x06	; 6
    7e3e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e42:	83 e3       	ldi	r24, 0x33	; 51
    7e44:	80 93 c4 00 	sts	0x00C4, r24
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7e48:	77 24       	eor	r7, r7
    7e4a:	73 94       	inc	r7
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7e4c:	15 e0       	ldi	r17, 0x05	; 5
    7e4e:	61 2e       	mov	r6, r17
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7e50:	b1 e1       	ldi	r27, 0x11	; 17
    7e52:	8b 2e       	mov	r8, r27
      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(NRWWSECTIONFAVORSIZE) 
      if (!((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8)))
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    7e54:	a3 e0       	ldi	r26, 0x03	; 3
    7e56:	9a 2e       	mov	r9, r26
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e58:	9a d0       	rcall	.+308    	; 0x7f8e <getch>

#if defined(BLUECONTROLLER) 
    if(ch == STK_GET_SYNC) {
    7e5a:	80 33       	cpi	r24, 0x30	; 48
    7e5c:	21 f4       	brne	.+8      	; 0x7e66 <main+0x66>
      // this is the initial sequence, sent by avrdude
      verifySpace();
    7e5e:	b7 d0       	rcall	.+366    	; 0x7fce <verifySpace>
      blueCAvrdudeSynced = 1;
    7e60:	dd 24       	eor	r13, r13
    7e62:	d3 94       	inc	r13
    7e64:	89 c0       	rjmp	.+274    	; 0x7f78 <main+0x178>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
    7e66:	81 34       	cpi	r24, 0x41	; 65
    7e68:	21 f4       	brne	.+8      	; 0x7e72 <main+0x72>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    7e6a:	81 e0       	ldi	r24, 0x01	; 1
    7e6c:	b8 d0       	rcall	.+368    	; 0x7fde <getNch>
      putch(0x03);
    7e6e:	83 e0       	ldi	r24, 0x03	; 3
    7e70:	1c c0       	rjmp	.+56     	; 0x7eaa <main+0xaa>
    }
    else if(ch == STK_SET_DEVICE) {
    7e72:	82 34       	cpi	r24, 0x42	; 66
    7e74:	11 f4       	brne	.+4      	; 0x7e7a <main+0x7a>
      // SET DEVICE is ignored
      getNch(20);
    7e76:	84 e1       	ldi	r24, 0x14	; 20
    7e78:	03 c0       	rjmp	.+6      	; 0x7e80 <main+0x80>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    7e7a:	85 34       	cpi	r24, 0x45	; 69
    7e7c:	19 f4       	brne	.+6      	; 0x7e84 <main+0x84>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e7e:	85 e0       	ldi	r24, 0x05	; 5
    7e80:	ae d0       	rcall	.+348    	; 0x7fde <getNch>
    7e82:	7a c0       	rjmp	.+244    	; 0x7f78 <main+0x178>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    7e84:	85 35       	cpi	r24, 0x55	; 85
    7e86:	61 f4       	brne	.+24     	; 0x7ea0 <main+0xa0>
      // LOAD ADDRESS
      address = getch();
    7e88:	82 d0       	rcall	.+260    	; 0x7f8e <getch>
      address = (address & 0xff) | (getch() << 8);
    7e8a:	08 2f       	mov	r16, r24
    7e8c:	10 e0       	ldi	r17, 0x00	; 0
    7e8e:	7f d0       	rcall	.+254    	; 0x7f8e <getch>
    7e90:	90 e0       	ldi	r25, 0x00	; 0
    7e92:	b8 2e       	mov	r11, r24
    7e94:	aa 24       	eor	r10, r10
    7e96:	a0 2a       	or	r10, r16
    7e98:	b1 2a       	or	r11, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
#endif
      address += address; // Convert from word address to byte address
    7e9a:	aa 0c       	add	r10, r10
    7e9c:	bb 1c       	adc	r11, r11
    7e9e:	6b c0       	rjmp	.+214    	; 0x7f76 <main+0x176>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    7ea0:	86 35       	cpi	r24, 0x56	; 86
    7ea2:	29 f4       	brne	.+10     	; 0x7eae <main+0xae>
      // UNIVERSAL command is ignored
      getNch(4);
    7ea4:	84 e0       	ldi	r24, 0x04	; 4
    7ea6:	9b d0       	rcall	.+310    	; 0x7fde <getNch>
      putch(0x00);
    7ea8:	80 e0       	ldi	r24, 0x00	; 0
    7eaa:	69 d0       	rcall	.+210    	; 0x7f7e <putch>
    7eac:	65 c0       	rjmp	.+202    	; 0x7f78 <main+0x178>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    7eae:	84 36       	cpi	r24, 0x64	; 100
    7eb0:	09 f0       	breq	.+2      	; 0x7eb4 <main+0xb4>
    7eb2:	3c c0       	rjmp	.+120    	; 0x7f2c <main+0x12c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    7eb4:	6c d0       	rcall	.+216    	; 0x7f8e <getch>
      length = getch();
    7eb6:	6b d0       	rcall	.+214    	; 0x7f8e <getch>
    7eb8:	08 2f       	mov	r16, r24
      getch();
    7eba:	69 d0       	rcall	.+210    	; 0x7f8e <getch>

      // If we are in RWW section, immediately start page erase
#if !defined(NRWWSECTIONFAVORSIZE) 
      if ((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8))
    7ebc:	8b 2d       	mov	r24, r11
    7ebe:	99 27       	eor	r25, r25
    7ec0:	18 2f       	mov	r17, r24
    7ec2:	80 37       	cpi	r24, 0x70	; 112
    7ec4:	18 f4       	brcc	.+6      	; 0x7ecc <main+0xcc>
        __boot_page_erase_short((uint16_t)(void*)address);
    7ec6:	f5 01       	movw	r30, r10
    7ec8:	97 be       	out	0x37, r9	; 55
    7eca:	e8 95       	spm
    7ecc:	c2 e0       	ldi	r28, 0x02	; 2
    7ece:	d1 e0       	ldi	r29, 0x01	; 1
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    7ed0:	5e d0       	rcall	.+188    	; 0x7f8e <getch>
    7ed2:	89 93       	st	Y+, r24
      while (--length);
    7ed4:	01 50       	subi	r16, 0x01	; 1
    7ed6:	e1 f7       	brne	.-8      	; 0x7ed0 <main+0xd0>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(NRWWSECTIONFAVORSIZE) 
      if (!((uint8_t)(address >> 8) < (uint8_t)(NRWWSTART >> 8)))
    7ed8:	10 37       	cpi	r17, 0x70	; 112
    7eda:	18 f0       	brcs	.+6      	; 0x7ee2 <main+0xe2>
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    7edc:	f5 01       	movw	r30, r10
    7ede:	97 be       	out	0x37, r9	; 55
    7ee0:	e8 95       	spm
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    7ee2:	07 b6       	in	r0, 0x37	; 55
    7ee4:	00 fc       	sbrc	r0, 0
    7ee6:	fd cf       	rjmp	.-6      	; 0x7ee2 <main+0xe2>
    7ee8:	a5 01       	movw	r20, r10
    7eea:	a2 e0       	ldi	r26, 0x02	; 2
    7eec:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    7eee:	2c 91       	ld	r18, X
    7ef0:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    7ef2:	11 96       	adiw	r26, 0x01	; 1
    7ef4:	8c 91       	ld	r24, X
    7ef6:	11 97       	sbiw	r26, 0x01	; 1
    7ef8:	90 e0       	ldi	r25, 0x00	; 0
    7efa:	98 2f       	mov	r25, r24
    7efc:	88 27       	eor	r24, r24
    7efe:	82 2b       	or	r24, r18
    7f00:	93 2b       	or	r25, r19
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    7f02:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    7f04:	fa 01       	movw	r30, r20
    7f06:	0c 01       	movw	r0, r24
    7f08:	77 be       	out	0x37, r7	; 55
    7f0a:	e8 95       	spm
    7f0c:	11 24       	eor	r1, r1
        addrPtr += 2;
    7f0e:	4e 5f       	subi	r20, 0xFE	; 254
    7f10:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    7f12:	f1 e0       	ldi	r31, 0x01	; 1
    7f14:	a2 38       	cpi	r26, 0x82	; 130
    7f16:	bf 07       	cpc	r27, r31
    7f18:	51 f7       	brne	.-44     	; 0x7eee <main+0xee>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    7f1a:	f5 01       	movw	r30, r10
    7f1c:	67 be       	out	0x37, r6	; 55
    7f1e:	e8 95       	spm
      boot_spm_busy_wait();
    7f20:	07 b6       	in	r0, 0x37	; 55
    7f22:	00 fc       	sbrc	r0, 0
    7f24:	fd cf       	rjmp	.-6      	; 0x7f20 <main+0x120>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    7f26:	87 be       	out	0x37, r8	; 55
    7f28:	e8 95       	spm
    7f2a:	25 c0       	rjmp	.+74     	; 0x7f76 <main+0x176>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    7f2c:	84 37       	cpi	r24, 0x74	; 116
    7f2e:	b1 f4       	brne	.+44     	; 0x7f5c <main+0x15c>
      // READ PAGE - we only read flash

      getch();			/* getlen */
    7f30:	2e d0       	rcall	.+92     	; 0x7f8e <getch>
      length = getch();
    7f32:	2d d0       	rcall	.+90     	; 0x7f8e <getch>
    7f34:	c8 2e       	mov	r12, r24
      getch();
    7f36:	2b d0       	rcall	.+86     	; 0x7f8e <getch>

      verifySpace();
    7f38:	4a d0       	rcall	.+148    	; 0x7fce <verifySpace>
    7f3a:	f5 01       	movw	r30, r10
    7f3c:	ec 2c       	mov	r14, r12
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    7f3e:	8f 01       	movw	r16, r30
    7f40:	0f 5f       	subi	r16, 0xFF	; 255
    7f42:	1f 4f       	sbci	r17, 0xFF	; 255
    7f44:	84 91       	lpm	r24, Z+
    7f46:	1b d0       	rcall	.+54     	; 0x7f7e <putch>
      while (--length);
    7f48:	ea 94       	dec	r14
    7f4a:	f8 01       	movw	r30, r16
    7f4c:	c1 f7       	brne	.-16     	; 0x7f3e <main+0x13e>
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    7f4e:	08 94       	sec
    7f50:	a1 1c       	adc	r10, r1
    7f52:	b1 1c       	adc	r11, r1
    7f54:	ca 94       	dec	r12
    7f56:	ac 0c       	add	r10, r12
    7f58:	b1 1c       	adc	r11, r1
    7f5a:	0e c0       	rjmp	.+28     	; 0x7f78 <main+0x178>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    7f5c:	85 37       	cpi	r24, 0x75	; 117
    7f5e:	39 f4       	brne	.+14     	; 0x7f6e <main+0x16e>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f60:	36 d0       	rcall	.+108    	; 0x7fce <verifySpace>
      putch(SIGNATURE_0);
    7f62:	8e e1       	ldi	r24, 0x1E	; 30
    7f64:	0c d0       	rcall	.+24     	; 0x7f7e <putch>
      putch(SIGNATURE_1);
    7f66:	85 e9       	ldi	r24, 0x95	; 149
    7f68:	0a d0       	rcall	.+20     	; 0x7f7e <putch>
      putch(SIGNATURE_2);
    7f6a:	8f e0       	ldi	r24, 0x0F	; 15
    7f6c:	9e cf       	rjmp	.-196    	; 0x7eaa <main+0xaa>
    }
    else if (ch == 'Q') {
    7f6e:	81 35       	cpi	r24, 0x51	; 81
    7f70:	11 f4       	brne	.+4      	; 0x7f76 <main+0x176>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f72:	88 e0       	ldi	r24, 0x08	; 8
    7f74:	1f d0       	rcall	.+62     	; 0x7fb4 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f76:	2b d0       	rcall	.+86     	; 0x7fce <verifySpace>
    }
    putch(STK_OK);
    7f78:	80 e1       	ldi	r24, 0x10	; 16
    7f7a:	01 d0       	rcall	.+2      	; 0x7f7e <putch>
    7f7c:	6d cf       	rjmp	.-294    	; 0x7e58 <main+0x58>

00007f7e <putch>:
  }
}

void putch(char ch) {
    7f7e:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7f80:	80 91 c0 00 	lds	r24, 0x00C0
    7f84:	85 ff       	sbrs	r24, 5
    7f86:	fc cf       	rjmp	.-8      	; 0x7f80 <putch+0x2>
  UDR0 = ch;
    7f88:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7f8c:	08 95       	ret

00007f8e <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f8e:	a8 95       	wdr
    7f90:	9f 2d       	mov	r25, r15
  if(timOverflCnt < (F_CPU/(1024*65536/EXTENDED_WAITTIME)))
  {
    // each timer overflow takes 8.39 seconds @8MHz
    if(TIFR1 & _BV(TOV1))
    {
      TIFR1 = _BV(TOV1);
    7f92:	21 e0       	ldi	r18, 0x01	; 1
    7f94:	07 c0       	rjmp	.+14     	; 0x7fa4 <getch+0x16>
#if defined(BLUECONTROLLER) 
/* the watchdog time after startup is too small when the reset button has to be pressed manually
before starting the download. Additionally it takes some time to establish the bluetooth connection
and the Arduino IDE compiles the sketch before download. */
void extendWatchdogPeriodAfterStartup() {
  if(timOverflCnt < (F_CPU/(1024*65536/EXTENDED_WAITTIME)))
    7f96:	94 30       	cpi	r25, 0x04	; 4
    7f98:	28 f4       	brcc	.+10     	; 0x7fa4 <getch+0x16>
  {
    // each timer overflow takes 8.39 seconds @8MHz
    if(TIFR1 & _BV(TOV1))
    7f9a:	b0 9b       	sbis	0x16, 0	; 22
    7f9c:	02 c0       	rjmp	.+4      	; 0x7fa2 <getch+0x14>
    {
      TIFR1 = _BV(TOV1);
    7f9e:	26 bb       	out	0x16, r18	; 22
      timOverflCnt++;
    7fa0:	9f 5f       	subi	r25, 0xFF	; 255
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fa2:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7fa4:	80 91 c0 00 	lds	r24, 0x00C0
    7fa8:	87 ff       	sbrs	r24, 7
    7faa:	f5 cf       	rjmp	.-22     	; 0x7f96 <getch+0x8>
    7fac:	f9 2e       	mov	r15, r25
#if defined(BLUECONTROLLER) 
    extendWatchdogPeriodAfterStartup();
#endif
  }

  ch = UDR0;
    7fae:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7fb2:	08 95       	ret

00007fb4 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fb4:	e0 e6       	ldi	r30, 0x60	; 96
    7fb6:	f0 e0       	ldi	r31, 0x00	; 0
    7fb8:	98 e1       	ldi	r25, 0x18	; 24
    7fba:	90 83       	st	Z, r25
  WDTCSR = x;
    7fbc:	80 83       	st	Z, r24
}
    7fbe:	08 95       	ret

00007fc0 <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
    7fc0:	26 9a       	sbi	0x04, 6	; 4
  LED_PORT &= ~_BV(LED); // switch LED off
    7fc2:	2e 98       	cbi	0x05, 6	; 5
  watchdogConfig(WATCHDOG_OFF);
    7fc4:	80 e0       	ldi	r24, 0x00	; 0
    7fc6:	f6 df       	rcall	.-20     	; 0x7fb4 <watchdogConfig>
  __asm__ __volatile__ (
    7fc8:	ee 27       	eor	r30, r30
    7fca:	ff 27       	eor	r31, r31
    7fcc:	09 94       	ijmp

00007fce <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
    7fce:	df df       	rcall	.-66     	; 0x7f8e <getch>
    7fd0:	80 32       	cpi	r24, 0x20	; 32
    7fd2:	11 f4       	brne	.+4      	; 0x7fd8 <verifySpace+0xa>
  {
    putch(STK_INSYNC);
    7fd4:	84 e1       	ldi	r24, 0x14	; 20
    7fd6:	d3 cf       	rjmp	.-90     	; 0x7f7e <putch>
  }
  else
  {
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage will exit the bootloader
    if(blueCAvrdudeSynced)
    7fd8:	d1 10       	cpse	r13, r1
      appStart();
    7fda:	f2 cf       	rjmp	.-28     	; 0x7fc0 <appStart>
    7fdc:	08 95       	ret

00007fde <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fde:	1f 93       	push	r17
    7fe0:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fe2:	d5 df       	rcall	.-86     	; 0x7f8e <getch>
    7fe4:	11 50       	subi	r17, 0x01	; 1
    7fe6:	e9 f7       	brne	.-6      	; 0x7fe2 <getNch+0x4>
  verifySpace();
    7fe8:	f2 df       	rcall	.-28     	; 0x7fce <verifySpace>
}
    7fea:	1f 91       	pop	r17
    7fec:	08 95       	ret
