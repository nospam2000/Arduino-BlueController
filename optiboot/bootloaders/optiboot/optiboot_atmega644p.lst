
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  0000fc00  0000fc00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005f  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000026d  00000000  00000000  000002ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018e  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000430  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000139  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000028e  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000f1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <main>:
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    fc00:	11 24       	eor	r1, r1
#endif

  uint8_t ch;

  // Adaboot no-wait mod
  ch = MCUSR;
    fc02:	14 b7       	in	r17, 0x34	; 52
  MCUSR = 0;
    fc04:	14 be       	out	0x34, r1	; 52
  //if (!(ch & _BV(EXTRF))) appStart();

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    fc06:	8e e0       	ldi	r24, 0x0E	; 14
    fc08:	c9 d0       	rcall	.+402    	; 0xfd9c <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    fc0a:	85 e0       	ldi	r24, 0x05	; 5
    fc0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    fc10:	82 e0       	ldi	r24, 0x02	; 2
    fc12:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    fc16:	88 e1       	ldi	r24, 0x18	; 24
    fc18:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    fc1c:	86 e0       	ldi	r24, 0x06	; 6
    fc1e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    fc22:	80 e1       	ldi	r24, 0x10	; 16
    fc24:	80 93 c4 00 	sts	0x00C4, r24
  {
    if (!(ch & _BV(EXTRF)))
      appStart();
  }
#else
    if (!(ch & _BV(EXTRF)))
    fc28:	11 ff       	sbrs	r17, 1
      appStart();
    fc2a:	be d0       	rcall	.+380    	; 0xfda8 <appStart>

  /* Set LED pin as output */
  LED_DDR |= LED_DDR_VAL;
    fc2c:	20 9a       	sbi	0x04, 0	; 4
    fc2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc30:	20 e3       	ldi	r18, 0x30	; 48
    fc32:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    fc34:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc36:	30 93 85 00 	sts	0x0085, r19
    fc3a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    fc3e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    fc40:	b0 9b       	sbis	0x16, 0	; 22
    fc42:	fe cf       	rjmp	.-4      	; 0xfc40 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    fc44:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fc46:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    fc48:	81 50       	subi	r24, 0x01	; 1
    fc4a:	a9 f7       	brne	.-22     	; 0xfc36 <main+0x36>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    fc4c:	99 24       	eor	r9, r9
    fc4e:	93 94       	inc	r9
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fc50:	a5 e0       	ldi	r26, 0x05	; 5
    fc52:	aa 2e       	mov	r10, r26
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fc54:	f1 e1       	ldi	r31, 0x11	; 17
    fc56:	bf 2e       	mov	r11, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc58:	99 d0       	rcall	.+306    	; 0xfd8c <getch>
      verifySpace();
      blueCAvrdudeSynced = 1;
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
    fc5a:	81 34       	cpi	r24, 0x41	; 65
    fc5c:	21 f4       	brne	.+8      	; 0xfc66 <main+0x66>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    fc5e:	81 e0       	ldi	r24, 0x01	; 1
    fc60:	b0 d0       	rcall	.+352    	; 0xfdc2 <getNch>
      putch(0x03);
    fc62:	83 e0       	ldi	r24, 0x03	; 3
    fc64:	1c c0       	rjmp	.+56     	; 0xfc9e <main+0x9e>
    }
    else if(ch == STK_SET_DEVICE) {
    fc66:	82 34       	cpi	r24, 0x42	; 66
    fc68:	11 f4       	brne	.+4      	; 0xfc6e <main+0x6e>
      // SET DEVICE is ignored
      getNch(20);
    fc6a:	84 e1       	ldi	r24, 0x14	; 20
    fc6c:	03 c0       	rjmp	.+6      	; 0xfc74 <main+0x74>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fc6e:	85 34       	cpi	r24, 0x45	; 69
    fc70:	19 f4       	brne	.+6      	; 0xfc78 <main+0x78>
      // SET DEVICE EXT is ignored
      getNch(5);
    fc72:	85 e0       	ldi	r24, 0x05	; 5
    fc74:	a6 d0       	rcall	.+332    	; 0xfdc2 <getNch>
    fc76:	7f c0       	rjmp	.+254    	; 0xfd76 <main+0x176>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fc78:	85 35       	cpi	r24, 0x55	; 85
    fc7a:	61 f4       	brne	.+24     	; 0xfc94 <main+0x94>
      // LOAD ADDRESS
      address = getch();
    fc7c:	87 d0       	rcall	.+270    	; 0xfd8c <getch>
      address = (address & 0xff) | (getch() << 8);
    fc7e:	08 2f       	mov	r16, r24
    fc80:	10 e0       	ldi	r17, 0x00	; 0
    fc82:	84 d0       	rcall	.+264    	; 0xfd8c <getch>
    fc84:	90 e0       	ldi	r25, 0x00	; 0
    fc86:	f8 2e       	mov	r15, r24
    fc88:	ee 24       	eor	r14, r14
    fc8a:	e0 2a       	or	r14, r16
    fc8c:	f1 2a       	or	r15, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
#endif
      address += address; // Convert from word address to byte address
    fc8e:	ee 0c       	add	r14, r14
    fc90:	ff 1c       	adc	r15, r15
    fc92:	70 c0       	rjmp	.+224    	; 0xfd74 <main+0x174>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    fc94:	86 35       	cpi	r24, 0x56	; 86
    fc96:	29 f4       	brne	.+10     	; 0xfca2 <main+0xa2>
      // UNIVERSAL command is ignored
      getNch(4);
    fc98:	84 e0       	ldi	r24, 0x04	; 4
    fc9a:	93 d0       	rcall	.+294    	; 0xfdc2 <getNch>
      putch(0x00);
    fc9c:	80 e0       	ldi	r24, 0x00	; 0
    fc9e:	6e d0       	rcall	.+220    	; 0xfd7c <putch>
    fca0:	6a c0       	rjmp	.+212    	; 0xfd76 <main+0x176>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    fca2:	84 36       	cpi	r24, 0x64	; 100
    fca4:	09 f0       	breq	.+2      	; 0xfca8 <main+0xa8>
    fca6:	41 c0       	rjmp	.+130    	; 0xfd2a <main+0x12a>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    fca8:	71 d0       	rcall	.+226    	; 0xfd8c <getch>
      length = getch();
    fcaa:	70 d0       	rcall	.+224    	; 0xfd8c <getch>
    fcac:	18 2f       	mov	r17, r24
      getch();
    fcae:	6e d0       	rcall	.+220    	; 0xfd8c <getch>

      // If we are in RWW section, immediately start page erase
#if !defined(BLUECONTROLLER) 
      if (address < NRWWSTART)
    fcb0:	80 e0       	ldi	r24, 0x00	; 0
    fcb2:	e8 16       	cp	r14, r24
    fcb4:	80 ee       	ldi	r24, 0xE0	; 224
    fcb6:	f8 06       	cpc	r15, r24
    fcb8:	20 f4       	brcc	.+8      	; 0xfcc2 <main+0xc2>
        __boot_page_erase_short((uint16_t)(void*)address);
    fcba:	83 e0       	ldi	r24, 0x03	; 3
    fcbc:	f7 01       	movw	r30, r14
    fcbe:	87 bf       	out	0x37, r24	; 55
    fcc0:	e8 95       	spm
    fcc2:	c2 e0       	ldi	r28, 0x02	; 2
    fcc4:	d1 e0       	ldi	r29, 0x01	; 1
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    fcc6:	62 d0       	rcall	.+196    	; 0xfd8c <getch>
    fcc8:	89 93       	st	Y+, r24
      while (--length);
    fcca:	11 50       	subi	r17, 0x01	; 1
    fccc:	e1 f7       	brne	.-8      	; 0xfcc6 <main+0xc6>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(BLUECONTROLLER) 
      if (address >= NRWWSTART)
    fcce:	f0 e0       	ldi	r31, 0x00	; 0
    fcd0:	ef 16       	cp	r14, r31
    fcd2:	f0 ee       	ldi	r31, 0xE0	; 224
    fcd4:	ff 06       	cpc	r15, r31
    fcd6:	20 f0       	brcs	.+8      	; 0xfce0 <main+0xe0>
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    fcd8:	83 e0       	ldi	r24, 0x03	; 3
    fcda:	f7 01       	movw	r30, r14
    fcdc:	87 bf       	out	0x37, r24	; 55
    fcde:	e8 95       	spm
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    fce0:	07 b6       	in	r0, 0x37	; 55
    fce2:	00 fc       	sbrc	r0, 0
    fce4:	fd cf       	rjmp	.-6      	; 0xfce0 <main+0xe0>
    fce6:	a7 01       	movw	r20, r14
    fce8:	a2 e0       	ldi	r26, 0x02	; 2
    fcea:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    fcec:	2c 91       	ld	r18, X
    fcee:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    fcf0:	11 96       	adiw	r26, 0x01	; 1
    fcf2:	8c 91       	ld	r24, X
    fcf4:	11 97       	sbiw	r26, 0x01	; 1
    fcf6:	90 e0       	ldi	r25, 0x00	; 0
    fcf8:	98 2f       	mov	r25, r24
    fcfa:	88 27       	eor	r24, r24
    fcfc:	82 2b       	or	r24, r18
    fcfe:	93 2b       	or	r25, r19
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    fd00:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    fd02:	fa 01       	movw	r30, r20
    fd04:	0c 01       	movw	r0, r24
    fd06:	97 be       	out	0x37, r9	; 55
    fd08:	e8 95       	spm
    fd0a:	11 24       	eor	r1, r1
        addrPtr += 2;
    fd0c:	4e 5f       	subi	r20, 0xFE	; 254
    fd0e:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    fd10:	f2 e0       	ldi	r31, 0x02	; 2
    fd12:	a2 30       	cpi	r26, 0x02	; 2
    fd14:	bf 07       	cpc	r27, r31
    fd16:	51 f7       	brne	.-44     	; 0xfcec <main+0xec>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    fd18:	f7 01       	movw	r30, r14
    fd1a:	a7 be       	out	0x37, r10	; 55
    fd1c:	e8 95       	spm
      boot_spm_busy_wait();
    fd1e:	07 b6       	in	r0, 0x37	; 55
    fd20:	00 fc       	sbrc	r0, 0
    fd22:	fd cf       	rjmp	.-6      	; 0xfd1e <main+0x11e>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    fd24:	b7 be       	out	0x37, r11	; 55
    fd26:	e8 95       	spm
    fd28:	25 c0       	rjmp	.+74     	; 0xfd74 <main+0x174>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    fd2a:	84 37       	cpi	r24, 0x74	; 116
    fd2c:	b1 f4       	brne	.+44     	; 0xfd5a <main+0x15a>
      // READ PAGE - we only read flash

      getch();			/* getlen */
    fd2e:	2e d0       	rcall	.+92     	; 0xfd8c <getch>
      length = getch();
    fd30:	2d d0       	rcall	.+90     	; 0xfd8c <getch>
    fd32:	c8 2e       	mov	r12, r24
      getch();
    fd34:	2b d0       	rcall	.+86     	; 0xfd8c <getch>

      verifySpace();
    fd36:	3f d0       	rcall	.+126    	; 0xfdb6 <verifySpace>
    fd38:	f7 01       	movw	r30, r14
    fd3a:	dc 2c       	mov	r13, r12
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    fd3c:	8f 01       	movw	r16, r30
    fd3e:	0f 5f       	subi	r16, 0xFF	; 255
    fd40:	1f 4f       	sbci	r17, 0xFF	; 255
    fd42:	84 91       	lpm	r24, Z+
    fd44:	1b d0       	rcall	.+54     	; 0xfd7c <putch>
      while (--length);
    fd46:	da 94       	dec	r13
    fd48:	f8 01       	movw	r30, r16
    fd4a:	c1 f7       	brne	.-16     	; 0xfd3c <main+0x13c>
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    fd4c:	08 94       	sec
    fd4e:	e1 1c       	adc	r14, r1
    fd50:	f1 1c       	adc	r15, r1
    fd52:	ca 94       	dec	r12
    fd54:	ec 0c       	add	r14, r12
    fd56:	f1 1c       	adc	r15, r1
    fd58:	0e c0       	rjmp	.+28     	; 0xfd76 <main+0x176>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    fd5a:	85 37       	cpi	r24, 0x75	; 117
    fd5c:	39 f4       	brne	.+14     	; 0xfd6c <main+0x16c>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fd5e:	2b d0       	rcall	.+86     	; 0xfdb6 <verifySpace>
      putch(SIGNATURE_0);
    fd60:	8e e1       	ldi	r24, 0x1E	; 30
    fd62:	0c d0       	rcall	.+24     	; 0xfd7c <putch>
      putch(SIGNATURE_1);
    fd64:	86 e9       	ldi	r24, 0x96	; 150
    fd66:	0a d0       	rcall	.+20     	; 0xfd7c <putch>
      putch(SIGNATURE_2);
    fd68:	89 e0       	ldi	r24, 0x09	; 9
    fd6a:	99 cf       	rjmp	.-206    	; 0xfc9e <main+0x9e>
    }
    else if (ch == 'Q') {
    fd6c:	81 35       	cpi	r24, 0x51	; 81
    fd6e:	11 f4       	brne	.+4      	; 0xfd74 <main+0x174>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    fd70:	88 e0       	ldi	r24, 0x08	; 8
    fd72:	14 d0       	rcall	.+40     	; 0xfd9c <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fd74:	20 d0       	rcall	.+64     	; 0xfdb6 <verifySpace>
    }
    putch(STK_OK);
    fd76:	80 e1       	ldi	r24, 0x10	; 16
    fd78:	01 d0       	rcall	.+2      	; 0xfd7c <putch>
    fd7a:	6e cf       	rjmp	.-292    	; 0xfc58 <main+0x58>

0000fd7c <putch>:
  }
}

void putch(char ch) {
    fd7c:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    fd7e:	80 91 c0 00 	lds	r24, 0x00C0
    fd82:	85 ff       	sbrs	r24, 5
    fd84:	fc cf       	rjmp	.-8      	; 0xfd7e <putch+0x2>
  UDR0 = ch;
    fd86:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fd8a:	08 95       	ret

0000fd8c <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fd8c:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    fd8e:	80 91 c0 00 	lds	r24, 0x00C0
    fd92:	87 ff       	sbrs	r24, 7
    fd94:	fc cf       	rjmp	.-8      	; 0xfd8e <getch+0x2>
#if defined(BLUECONTROLLER) 
    extendWatchdogPeriodAfterStartup();
#endif
  }

  ch = UDR0;
    fd96:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fd9a:	08 95       	ret

0000fd9c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fd9c:	e0 e6       	ldi	r30, 0x60	; 96
    fd9e:	f0 e0       	ldi	r31, 0x00	; 0
    fda0:	98 e1       	ldi	r25, 0x18	; 24
    fda2:	90 83       	st	Z, r25
  WDTCSR = x;
    fda4:	80 83       	st	Z, r24
}
    fda6:	08 95       	ret

0000fda8 <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
    fda8:	20 9a       	sbi	0x04, 0	; 4
  LED_PORT &= ~_BV(LED); // switch LED off
    fdaa:	28 98       	cbi	0x05, 0	; 5
  watchdogConfig(WATCHDOG_OFF);
    fdac:	80 e0       	ldi	r24, 0x00	; 0
    fdae:	f6 df       	rcall	.-20     	; 0xfd9c <watchdogConfig>
  __asm__ __volatile__ (
    fdb0:	ee 27       	eor	r30, r30
    fdb2:	ff 27       	eor	r31, r31
    fdb4:	09 94       	ijmp

0000fdb6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
    fdb6:	ea df       	rcall	.-44     	; 0xfd8c <getch>
    fdb8:	80 32       	cpi	r24, 0x20	; 32
    fdba:	11 f4       	brne	.+4      	; 0xfdc0 <verifySpace+0xa>
  {
    putch(STK_INSYNC);
    fdbc:	84 e1       	ldi	r24, 0x14	; 20
    fdbe:	de cf       	rjmp	.-68     	; 0xfd7c <putch>
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage will exit the bootloader
    if(blueCAvrdudeSynced)
      appStart();
#else
    appStart();
    fdc0:	f3 cf       	rjmp	.-26     	; 0xfda8 <appStart>

0000fdc2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fdc2:	1f 93       	push	r17
    fdc4:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    fdc6:	e2 df       	rcall	.-60     	; 0xfd8c <getch>
    fdc8:	11 50       	subi	r17, 0x01	; 1
    fdca:	e9 f7       	brne	.-6      	; 0xfdc6 <getNch+0x4>
  verifySpace();
    fdcc:	f4 df       	rcall	.-24     	; 0xfdb6 <verifySpace>
}
    fdce:	1f 91       	pop	r17
    fdd0:	08 95       	ret
