
optiboot_bluec88_8MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00001e00  00001e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000009e  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000027d  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000185  00000000  00000000  0000057f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000464  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000183  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000291  00000000  00000000  00000d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <main>:
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    1e00:	11 24       	eor	r1, r1
#endif

  uint8_t ch;

  // Adaboot no-wait mod
  ch = MCUSR;
    1e02:	04 b7       	in	r16, 0x34	; 52
  MCUSR = 0;
    1e04:	14 be       	out	0x34, r1	; 52
  //if (!(ch & _BV(EXTRF))) appStart();

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    1e06:	8e e0       	ldi	r24, 0x0E	; 14
    1e08:	d2 d0       	rcall	.+420    	; 0x1fae <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1e0a:	85 e0       	ldi	r24, 0x05	; 5
    1e0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    1e16:	88 e1       	ldi	r24, 0x18	; 24
    1e18:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    1e1c:	86 e0       	ldi	r24, 0x06	; 6
    1e1e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    1e22:	88 e0       	ldi	r24, 0x08	; 8
    1e24:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

#if defined(BLUECONTROLLER) 
  BLUEC_BTN_PORT |= _BV(BLUEC_BTN); // enable pull-up for BlueController button 
    1e28:	5a 9a       	sbi	0x0b, 2	; 11
  //BLUEC_BT_RESET_PORT |= _BV(BLUEC_BT_RESET); // set BlueController BTM-222 RESET line to HIGH/pullup-enable
  //BLUEC_BT_RESET_DDR |= _BV(BLUEC_BT_RESET); /* set BlueController BTM-222 RESET line as output */
  blueCAvrdudeSynced = 0;
    1e2a:	dd 24       	eor	r13, r13
  timOverflCnt = 0;
    1e2c:	ff 24       	eor	r15, r15
  blueCBtnNotPressed = (BLUEC_BTN_PIN & _BV(BLUEC_BTN));
    1e2e:	89 b1       	in	r24, 0x09	; 9
    1e30:	14 e0       	ldi	r17, 0x04	; 4
    1e32:	e1 2e       	mov	r14, r17
    1e34:	e8 22       	and	r14, r24

  if(enterBootloaderByAppMagic == ENTER_BL_MAGIC)
    1e36:	80 91 00 01 	lds	r24, 0x0100
    1e3a:	90 91 01 01 	lds	r25, 0x0101
    1e3e:	8e 59       	subi	r24, 0x9E	; 158
    1e40:	94 4c       	sbci	r25, 0xC4	; 196
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <main+0x4c>
  {
    enterBootloaderByAppMagicLSB = 0; // disable magic mechanism for next reset to avoid endless loop
    1e44:	10 92 00 01 	sts	0x0100, r1
    blueCBtnNotPressed = 0;
    1e48:	ee 24       	eor	r14, r14
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <main+0x50>
  }
  else
  {
    if (!(ch & _BV(EXTRF)))
    1e4c:	01 ff       	sbrs	r16, 1
      appStart();
    1e4e:	b5 d0       	rcall	.+362    	; 0x1fba <appStart>

#if defined(BLUECONTROLLER) 
    if(ch == STK_GET_SYNC) {
      // this is the initial sequence, sent by avrdude
      verifySpace();
      blueCAvrdudeSynced = 1;
    1e50:	66 24       	eor	r6, r6
    1e52:	63 94       	inc	r6
      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(BLUECONTROLLER) 
      if (address >= NRWWSTART)
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    1e54:	b3 e0       	ldi	r27, 0x03	; 3
    1e56:	5b 2e       	mov	r5, r27
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1e58:	a5 e0       	ldi	r26, 0x05	; 5
    1e5a:	7a 2e       	mov	r7, r26
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    1e5c:	f1 e1       	ldi	r31, 0x11	; 17
    1e5e:	8f 2e       	mov	r8, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e60:	90 d0       	rcall	.+288    	; 0x1f82 <getch>

#if defined(BLUECONTROLLER) 
    if(ch == STK_GET_SYNC) {
    1e62:	80 33       	cpi	r24, 0x30	; 48
    1e64:	21 f4       	brne	.+8      	; 0x1e6e <main+0x6e>
      // this is the initial sequence, sent by avrdude
      verifySpace();
    1e66:	b0 d0       	rcall	.+352    	; 0x1fc8 <verifySpace>
      blueCAvrdudeSynced = 1;
    1e68:	dd 24       	eor	r13, r13
    1e6a:	d3 94       	inc	r13
    1e6c:	7f c0       	rjmp	.+254    	; 0x1f6c <main+0x16c>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
    1e6e:	81 34       	cpi	r24, 0x41	; 65
    1e70:	21 f4       	brne	.+8      	; 0x1e7a <main+0x7a>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	b1 d0       	rcall	.+354    	; 0x1fd8 <getNch>
      putch(0x03);
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	1c c0       	rjmp	.+56     	; 0x1eb2 <main+0xb2>
    }
    else if(ch == STK_SET_DEVICE) {
    1e7a:	82 34       	cpi	r24, 0x42	; 66
    1e7c:	11 f4       	brne	.+4      	; 0x1e82 <main+0x82>
      // SET DEVICE is ignored
      getNch(20);
    1e7e:	84 e1       	ldi	r24, 0x14	; 20
    1e80:	03 c0       	rjmp	.+6      	; 0x1e88 <main+0x88>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1e82:	85 34       	cpi	r24, 0x45	; 69
    1e84:	19 f4       	brne	.+6      	; 0x1e8c <main+0x8c>
      // SET DEVICE EXT is ignored
      getNch(5);
    1e86:	85 e0       	ldi	r24, 0x05	; 5
    1e88:	a7 d0       	rcall	.+334    	; 0x1fd8 <getNch>
    1e8a:	70 c0       	rjmp	.+224    	; 0x1f6c <main+0x16c>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1e8c:	85 35       	cpi	r24, 0x55	; 85
    1e8e:	61 f4       	brne	.+24     	; 0x1ea8 <main+0xa8>
      // LOAD ADDRESS
      address = getch();
    1e90:	78 d0       	rcall	.+240    	; 0x1f82 <getch>
      address = (address & 0xff) | (getch() << 8);
    1e92:	08 2f       	mov	r16, r24
    1e94:	10 e0       	ldi	r17, 0x00	; 0
    1e96:	75 d0       	rcall	.+234    	; 0x1f82 <getch>
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	b8 2e       	mov	r11, r24
    1e9c:	aa 24       	eor	r10, r10
    1e9e:	a0 2a       	or	r10, r16
    1ea0:	b1 2a       	or	r11, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
#endif
      address += address; // Convert from word address to byte address
    1ea2:	aa 0c       	add	r10, r10
    1ea4:	bb 1c       	adc	r11, r11
    1ea6:	61 c0       	rjmp	.+194    	; 0x1f6a <main+0x16a>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    1ea8:	86 35       	cpi	r24, 0x56	; 86
    1eaa:	29 f4       	brne	.+10     	; 0x1eb6 <main+0xb6>
      // UNIVERSAL command is ignored
      getNch(4);
    1eac:	84 e0       	ldi	r24, 0x04	; 4
    1eae:	94 d0       	rcall	.+296    	; 0x1fd8 <getNch>
      putch(0x00);
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	5f d0       	rcall	.+190    	; 0x1f72 <putch>
    1eb4:	5b c0       	rjmp	.+182    	; 0x1f6c <main+0x16c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1eb6:	84 36       	cpi	r24, 0x64	; 100
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <main+0xbc>
    1eba:	32 c0       	rjmp	.+100    	; 0x1f20 <main+0x120>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    1ebc:	62 d0       	rcall	.+196    	; 0x1f82 <getch>
      length = getch();
    1ebe:	61 d0       	rcall	.+194    	; 0x1f82 <getch>
    1ec0:	08 2f       	mov	r16, r24
      getch();
    1ec2:	5f d0       	rcall	.+190    	; 0x1f82 <getch>
    1ec4:	c2 e0       	ldi	r28, 0x02	; 2
    1ec6:	d1 e0       	ldi	r29, 0x01	; 1
        __boot_page_erase_short((uint16_t)(void*)address);
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1ec8:	5c d0       	rcall	.+184    	; 0x1f82 <getch>
    1eca:	89 93       	st	Y+, r24
      while (--length);
    1ecc:	01 50       	subi	r16, 0x01	; 1
    1ece:	e1 f7       	brne	.-8      	; 0x1ec8 <main+0xc8>
      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(BLUECONTROLLER) 
      if (address >= NRWWSTART)
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    1ed0:	f5 01       	movw	r30, r10
    1ed2:	57 be       	out	0x37, r5	; 55
    1ed4:	e8 95       	spm
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    1ed6:	07 b6       	in	r0, 0x37	; 55
    1ed8:	00 fc       	sbrc	r0, 0
    1eda:	fd cf       	rjmp	.-6      	; 0x1ed6 <main+0xd6>
    1edc:	a5 01       	movw	r20, r10
    1ede:	a2 e0       	ldi	r26, 0x02	; 2
    1ee0:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    1ee2:	2c 91       	ld	r18, X
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    1ee6:	11 96       	adiw	r26, 0x01	; 1
    1ee8:	8c 91       	ld	r24, X
    1eea:	11 97       	sbiw	r26, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	98 2f       	mov	r25, r24
    1ef0:	88 27       	eor	r24, r24
    1ef2:	82 2b       	or	r24, r18
    1ef4:	93 2b       	or	r25, r19
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    1ef6:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1ef8:	fa 01       	movw	r30, r20
    1efa:	0c 01       	movw	r0, r24
    1efc:	67 be       	out	0x37, r6	; 55
    1efe:	e8 95       	spm
    1f00:	11 24       	eor	r1, r1
        addrPtr += 2;
    1f02:	4e 5f       	subi	r20, 0xFE	; 254
    1f04:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    1f06:	f1 e0       	ldi	r31, 0x01	; 1
    1f08:	a2 34       	cpi	r26, 0x42	; 66
    1f0a:	bf 07       	cpc	r27, r31
    1f0c:	51 f7       	brne	.-44     	; 0x1ee2 <main+0xe2>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1f0e:	f5 01       	movw	r30, r10
    1f10:	77 be       	out	0x37, r7	; 55
    1f12:	e8 95       	spm
      boot_spm_busy_wait();
    1f14:	07 b6       	in	r0, 0x37	; 55
    1f16:	00 fc       	sbrc	r0, 0
    1f18:	fd cf       	rjmp	.-6      	; 0x1f14 <main+0x114>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    1f1a:	87 be       	out	0x37, r8	; 55
    1f1c:	e8 95       	spm
    1f1e:	25 c0       	rjmp	.+74     	; 0x1f6a <main+0x16a>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1f20:	84 37       	cpi	r24, 0x74	; 116
    1f22:	b1 f4       	brne	.+44     	; 0x1f50 <main+0x150>
      // READ PAGE - we only read flash

      getch();			/* getlen */
    1f24:	2e d0       	rcall	.+92     	; 0x1f82 <getch>
      length = getch();
    1f26:	2d d0       	rcall	.+90     	; 0x1f82 <getch>
    1f28:	98 2e       	mov	r9, r24
      getch();
    1f2a:	2b d0       	rcall	.+86     	; 0x1f82 <getch>

      verifySpace();
    1f2c:	4d d0       	rcall	.+154    	; 0x1fc8 <verifySpace>
    1f2e:	f5 01       	movw	r30, r10
    1f30:	c9 2c       	mov	r12, r9
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    1f32:	8f 01       	movw	r16, r30
    1f34:	0f 5f       	subi	r16, 0xFF	; 255
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	84 91       	lpm	r24, Z+
    1f3a:	1b d0       	rcall	.+54     	; 0x1f72 <putch>
      while (--length);
    1f3c:	ca 94       	dec	r12
    1f3e:	f8 01       	movw	r30, r16
    1f40:	c1 f7       	brne	.-16     	; 0x1f32 <main+0x132>
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    1f42:	08 94       	sec
    1f44:	a1 1c       	adc	r10, r1
    1f46:	b1 1c       	adc	r11, r1
    1f48:	9a 94       	dec	r9
    1f4a:	a9 0c       	add	r10, r9
    1f4c:	b1 1c       	adc	r11, r1
    1f4e:	0e c0       	rjmp	.+28     	; 0x1f6c <main+0x16c>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1f50:	85 37       	cpi	r24, 0x75	; 117
    1f52:	39 f4       	brne	.+14     	; 0x1f62 <main+0x162>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f54:	39 d0       	rcall	.+114    	; 0x1fc8 <verifySpace>
      putch(SIGNATURE_0);
    1f56:	8e e1       	ldi	r24, 0x1E	; 30
    1f58:	0c d0       	rcall	.+24     	; 0x1f72 <putch>
      putch(SIGNATURE_1);
    1f5a:	83 e9       	ldi	r24, 0x93	; 147
    1f5c:	0a d0       	rcall	.+20     	; 0x1f72 <putch>
      putch(SIGNATURE_2);
    1f5e:	8f e0       	ldi	r24, 0x0F	; 15
    1f60:	a8 cf       	rjmp	.-176    	; 0x1eb2 <main+0xb2>
    }
    else if (ch == 'Q') {
    1f62:	81 35       	cpi	r24, 0x51	; 81
    1f64:	11 f4       	brne	.+4      	; 0x1f6a <main+0x16a>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1f66:	88 e0       	ldi	r24, 0x08	; 8
    1f68:	22 d0       	rcall	.+68     	; 0x1fae <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1f6a:	2e d0       	rcall	.+92     	; 0x1fc8 <verifySpace>
    }
    putch(STK_OK);
    1f6c:	80 e1       	ldi	r24, 0x10	; 16
    1f6e:	01 d0       	rcall	.+2      	; 0x1f72 <putch>
    1f70:	77 cf       	rjmp	.-274    	; 0x1e60 <main+0x60>

00001f72 <putch>:
  }
}

void putch(char ch) {
    1f72:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    1f74:	80 91 c0 00 	lds	r24, 0x00C0
    1f78:	85 ff       	sbrs	r24, 5
    1f7a:	fc cf       	rjmp	.-8      	; 0x1f74 <putch+0x2>
  UDR0 = ch;
    1f7c:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    1f80:	08 95       	ret

00001f82 <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f82:	a8 95       	wdr
#if defined(BLUECONTROLLER) 
/* the watchdog time after startup is too small when the reset button has to be pressed manually
before starting the download. Additionally it takes some time to establish the bluetooth connection
and the Arduino IDE compiles the sketch before download. */
void extendWatchdogPeriodAfterStartup() {
  if(!blueCBtnNotPressed && timOverflCnt < (F_CPU/(1024*65536/BLUEC_WAITTIME)))
    1f84:	2e 2d       	mov	r18, r14
    1f86:	9f 2d       	mov	r25, r15
  {
    // each timer overflow takes 8.39 seconds @8MHz
    if(TIFR1 & _BV(TOV1))
    {
      TIFR1 = _BV(TOV1);
    1f88:	31 e0       	ldi	r19, 0x01	; 1
    1f8a:	09 c0       	rjmp	.+18     	; 0x1f9e <getch+0x1c>
#if defined(BLUECONTROLLER) 
/* the watchdog time after startup is too small when the reset button has to be pressed manually
before starting the download. Additionally it takes some time to establish the bluetooth connection
and the Arduino IDE compiles the sketch before download. */
void extendWatchdogPeriodAfterStartup() {
  if(!blueCBtnNotPressed && timOverflCnt < (F_CPU/(1024*65536/BLUEC_WAITTIME)))
    1f8c:	22 23       	and	r18, r18
    1f8e:	39 f4       	brne	.+14     	; 0x1f9e <getch+0x1c>
    1f90:	94 30       	cpi	r25, 0x04	; 4
    1f92:	28 f4       	brcc	.+10     	; 0x1f9e <getch+0x1c>
  {
    // each timer overflow takes 8.39 seconds @8MHz
    if(TIFR1 & _BV(TOV1))
    1f94:	b0 9b       	sbis	0x16, 0	; 22
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <getch+0x1a>
    {
      TIFR1 = _BV(TOV1);
    1f98:	36 bb       	out	0x16, r19	; 22
      timOverflCnt++;
    1f9a:	9f 5f       	subi	r25, 0xFF	; 255
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f9c:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    1f9e:	80 91 c0 00 	lds	r24, 0x00C0
    1fa2:	87 ff       	sbrs	r24, 7
    1fa4:	f3 cf       	rjmp	.-26     	; 0x1f8c <getch+0xa>
    1fa6:	f9 2e       	mov	r15, r25
#if defined(BLUECONTROLLER) 
    extendWatchdogPeriodAfterStartup();
#endif
  }

  ch = UDR0;
    1fa8:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1fac:	08 95       	ret

00001fae <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1fae:	e0 e6       	ldi	r30, 0x60	; 96
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	98 e1       	ldi	r25, 0x18	; 24
    1fb4:	90 83       	st	Z, r25
  WDTCSR = x;
    1fb6:	80 83       	st	Z, r24
}
    1fb8:	08 95       	ret

00001fba <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
    1fba:	26 9a       	sbi	0x04, 6	; 4
  LED_PORT &= ~_BV(LED); // switch LED off
    1fbc:	2e 98       	cbi	0x05, 6	; 5
  watchdogConfig(WATCHDOG_OFF);
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	f6 df       	rcall	.-20     	; 0x1fae <watchdogConfig>
  __asm__ __volatile__ (
    1fc2:	ee 27       	eor	r30, r30
    1fc4:	ff 27       	eor	r31, r31
    1fc6:	09 94       	ijmp

00001fc8 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
    1fc8:	dc df       	rcall	.-72     	; 0x1f82 <getch>
    1fca:	80 32       	cpi	r24, 0x20	; 32
    1fcc:	11 f4       	brne	.+4      	; 0x1fd2 <verifySpace+0xa>
  {
    putch(STK_INSYNC);
    1fce:	84 e1       	ldi	r24, 0x14	; 20
    1fd0:	d0 cf       	rjmp	.-96     	; 0x1f72 <putch>
  }
  else
  {
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage will exit the bootloader
    if(blueCAvrdudeSynced)
    1fd2:	d1 10       	cpse	r13, r1
      appStart();
    1fd4:	f2 cf       	rjmp	.-28     	; 0x1fba <appStart>
    1fd6:	08 95       	ret

00001fd8 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fd8:	1f 93       	push	r17
    1fda:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    1fdc:	d2 df       	rcall	.-92     	; 0x1f82 <getch>
    1fde:	11 50       	subi	r17, 0x01	; 1
    1fe0:	e9 f7       	brne	.-6      	; 0x1fdc <getNch+0x4>
  verifySpace();
    1fe2:	f2 df       	rcall	.-28     	; 0x1fc8 <verifySpace>
}
    1fe4:	1f 91       	pop	r17
    1fe6:	08 95       	ret
