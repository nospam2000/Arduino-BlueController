
optiboot_lilypad_resonator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00003e00  00003e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005f  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000026d  00000000  00000000  000002ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000018e  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000430  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000139  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000028e  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000f1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    3e00:	11 24       	eor	r1, r1
#endif

  uint8_t ch;

  // Adaboot no-wait mod
  ch = MCUSR;
    3e02:	14 b7       	in	r17, 0x34	; 52
  MCUSR = 0;
    3e04:	14 be       	out	0x34, r1	; 52
  //if (!(ch & _BV(EXTRF))) appStart();

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    3e06:	8e e0       	ldi	r24, 0x0E	; 14
    3e08:	c9 d0       	rcall	.+402    	; 0x3f9c <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(BLUECONTROLLER)
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3e0a:	85 e0       	ldi	r24, 0x05	; 5
    3e0c:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UCSR0A = _BV(U2X0); //Double speed mode USART0
    3e10:	82 e0       	ldi	r24, 0x02	; 2
    3e12:	80 93 c0 00 	sts	0x00C0, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    3e16:	88 e1       	ldi	r24, 0x18	; 24
    3e18:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    3e1c:	86 e0       	ldi	r24, 0x06	; 6
    3e1e:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    3e22:	88 e0       	ldi	r24, 0x08	; 8
    3e24:	80 93 c4 00 	sts	0x00C4, r24
  {
    if (!(ch & _BV(EXTRF)))
      appStart();
  }
#else
    if (!(ch & _BV(EXTRF)))
    3e28:	11 ff       	sbrs	r17, 1
      appStart();
    3e2a:	be d0       	rcall	.+380    	; 0x3fa8 <appStart>

  /* Set LED pin as output */
  LED_DDR |= LED_DDR_VAL;
    3e2c:	25 9a       	sbi	0x04, 5	; 4
    3e2e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e30:	28 e1       	ldi	r18, 0x18	; 24
    3e32:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    3e34:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e36:	30 93 85 00 	sts	0x0085, r19
    3e3a:	20 93 84 00 	sts	0x0084, r18
    TIFR1 = _BV(TOV1);
    3e3e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    3e40:	b0 9b       	sbis	0x16, 0	; 22
    3e42:	fe cf       	rjmp	.-4      	; 0x3e40 <main+0x40>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    3e44:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3e46:	a8 95       	wdr
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    3e48:	81 50       	subi	r24, 0x01	; 1
    3e4a:	a9 f7       	brne	.-22     	; 0x3e36 <main+0x36>
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    3e4c:	99 24       	eor	r9, r9
    3e4e:	93 94       	inc	r9
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
        addrPtr += 2;
      } while (--ch);
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3e50:	a5 e0       	ldi	r26, 0x05	; 5
    3e52:	aa 2e       	mov	r10, r26
      boot_spm_busy_wait();

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3e54:	f1 e1       	ldi	r31, 0x11	; 17
    3e56:	bf 2e       	mov	r11, r31
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e58:	99 d0       	rcall	.+306    	; 0x3f8c <getch>
      verifySpace();
      blueCAvrdudeSynced = 1;
    }
    else 
#endif
    if(ch == STK_GET_PARAMETER) {
    3e5a:	81 34       	cpi	r24, 0x41	; 65
    3e5c:	21 f4       	brne	.+8      	; 0x3e66 <main+0x66>
      // GET PARAMETER returns a generic 0x03 reply - enough to keep Avrdude happy
      getNch(1);
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	b0 d0       	rcall	.+352    	; 0x3fc2 <getNch>
      putch(0x03);
    3e62:	83 e0       	ldi	r24, 0x03	; 3
    3e64:	1c c0       	rjmp	.+56     	; 0x3e9e <main+0x9e>
    }
    else if(ch == STK_SET_DEVICE) {
    3e66:	82 34       	cpi	r24, 0x42	; 66
    3e68:	11 f4       	brne	.+4      	; 0x3e6e <main+0x6e>
      // SET DEVICE is ignored
      getNch(20);
    3e6a:	84 e1       	ldi	r24, 0x14	; 20
    3e6c:	03 c0       	rjmp	.+6      	; 0x3e74 <main+0x74>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3e6e:	85 34       	cpi	r24, 0x45	; 69
    3e70:	19 f4       	brne	.+6      	; 0x3e78 <main+0x78>
      // SET DEVICE EXT is ignored
      getNch(5);
    3e72:	85 e0       	ldi	r24, 0x05	; 5
    3e74:	a6 d0       	rcall	.+332    	; 0x3fc2 <getNch>
    3e76:	7f c0       	rjmp	.+254    	; 0x3f76 <main+0x176>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3e78:	85 35       	cpi	r24, 0x55	; 85
    3e7a:	61 f4       	brne	.+24     	; 0x3e94 <main+0x94>
      // LOAD ADDRESS
      address = getch();
    3e7c:	87 d0       	rcall	.+270    	; 0x3f8c <getch>
      address = (address & 0xff) | (getch() << 8);
    3e7e:	08 2f       	mov	r16, r24
    3e80:	10 e0       	ldi	r17, 0x00	; 0
    3e82:	84 d0       	rcall	.+264    	; 0x3f8c <getch>
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	f8 2e       	mov	r15, r24
    3e88:	ee 24       	eor	r14, r14
    3e8a:	e0 2a       	or	r14, r16
    3e8c:	f1 2a       	or	r15, r17
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (address & 0x8000) ? 1 : 0;
#endif
      address += address; // Convert from word address to byte address
    3e8e:	ee 0c       	add	r14, r14
    3e90:	ff 1c       	adc	r15, r15
    3e92:	70 c0       	rjmp	.+224    	; 0x3f74 <main+0x174>
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3e94:	86 35       	cpi	r24, 0x56	; 86
    3e96:	29 f4       	brne	.+10     	; 0x3ea2 <main+0xa2>
      // UNIVERSAL command is ignored
      getNch(4);
    3e98:	84 e0       	ldi	r24, 0x04	; 4
    3e9a:	93 d0       	rcall	.+294    	; 0x3fc2 <getNch>
      putch(0x00);
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	6e d0       	rcall	.+220    	; 0x3f7c <putch>
    3ea0:	6a c0       	rjmp	.+212    	; 0x3f76 <main+0x176>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    3ea2:	84 36       	cpi	r24, 0x64	; 100
    3ea4:	09 f0       	breq	.+2      	; 0x3ea8 <main+0xa8>
    3ea6:	41 c0       	rjmp	.+130    	; 0x3f2a <main+0x12a>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    3ea8:	71 d0       	rcall	.+226    	; 0x3f8c <getch>
      length = getch();
    3eaa:	70 d0       	rcall	.+224    	; 0x3f8c <getch>
    3eac:	18 2f       	mov	r17, r24
      getch();
    3eae:	6e d0       	rcall	.+220    	; 0x3f8c <getch>

      // If we are in RWW section, immediately start page erase
#if !defined(BLUECONTROLLER) 
      if (address < NRWWSTART)
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	e8 16       	cp	r14, r24
    3eb4:	88 e3       	ldi	r24, 0x38	; 56
    3eb6:	f8 06       	cpc	r15, r24
    3eb8:	20 f4       	brcc	.+8      	; 0x3ec2 <main+0xc2>
        __boot_page_erase_short((uint16_t)(void*)address);
    3eba:	83 e0       	ldi	r24, 0x03	; 3
    3ebc:	f7 01       	movw	r30, r14
    3ebe:	87 bf       	out	0x37, r24	; 55
    3ec0:	e8 95       	spm
    3ec2:	c2 e0       	ldi	r28, 0x02	; 2
    3ec4:	d1 e0       	ldi	r29, 0x01	; 1
#endif
      
      // While that is going on, read in page contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    3ec6:	62 d0       	rcall	.+196    	; 0x3f8c <getch>
    3ec8:	89 93       	st	Y+, r24
      while (--length);
    3eca:	11 50       	subi	r17, 0x01	; 1
    3ecc:	e1 f7       	brne	.-8      	; 0x3ec6 <main+0xc6>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
#if !defined(BLUECONTROLLER) 
      if (address >= NRWWSTART)
    3ece:	f0 e0       	ldi	r31, 0x00	; 0
    3ed0:	ef 16       	cp	r14, r31
    3ed2:	f8 e3       	ldi	r31, 0x38	; 56
    3ed4:	ff 06       	cpc	r15, r31
    3ed6:	20 f0       	brcs	.+8      	; 0x3ee0 <main+0xe0>
#endif
        __boot_page_erase_short((uint16_t)(void*)address);
    3ed8:	83 e0       	ldi	r24, 0x03	; 3
    3eda:	f7 01       	movw	r30, r14
    3edc:	87 bf       	out	0x37, r24	; 55
    3ede:	e8 95       	spm
      }
#endif

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    3ee0:	07 b6       	in	r0, 0x37	; 55
    3ee2:	00 fc       	sbrc	r0, 0
    3ee4:	fd cf       	rjmp	.-6      	; 0x3ee0 <main+0xe0>
    3ee6:	a7 01       	movw	r20, r14
    3ee8:	a2 e0       	ldi	r26, 0x02	; 2
    3eea:	b1 e0       	ldi	r27, 0x01	; 1
      bufPtr = buff;
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    3eec:	2c 91       	ld	r18, X
    3eee:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    3ef0:	11 96       	adiw	r26, 0x01	; 1
    3ef2:	8c 91       	ld	r24, X
    3ef4:	11 97       	sbiw	r26, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	98 2f       	mov	r25, r24
    3efa:	88 27       	eor	r24, r24
    3efc:	82 2b       	or	r24, r18
    3efe:	93 2b       	or	r25, r19
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    3f00:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3f02:	fa 01       	movw	r30, r20
    3f04:	0c 01       	movw	r0, r24
    3f06:	97 be       	out	0x37, r9	; 55
    3f08:	e8 95       	spm
    3f0a:	11 24       	eor	r1, r1
        addrPtr += 2;
    3f0c:	4e 5f       	subi	r20, 0xFE	; 254
    3f0e:	5f 4f       	sbci	r21, 0xFF	; 255
      } while (--ch);
    3f10:	f1 e0       	ldi	r31, 0x01	; 1
    3f12:	a2 38       	cpi	r26, 0x82	; 130
    3f14:	bf 07       	cpc	r27, r31
    3f16:	51 f7       	brne	.-44     	; 0x3eec <main+0xec>
      
      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    3f18:	f7 01       	movw	r30, r14
    3f1a:	a7 be       	out	0x37, r10	; 55
    3f1c:	e8 95       	spm
      boot_spm_busy_wait();
    3f1e:	07 b6       	in	r0, 0x37	; 55
    3f20:	00 fc       	sbrc	r0, 0
    3f22:	fd cf       	rjmp	.-6      	; 0x3f1e <main+0x11e>

#if defined(RWWSRE)
      // Reenable read access to flash
      boot_rww_enable();
    3f24:	b7 be       	out	0x37, r11	; 55
    3f26:	e8 95       	spm
    3f28:	25 c0       	rjmp	.+74     	; 0x3f74 <main+0x174>

      // Read command terminator, start reply
      verifySpace();
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f2a:	84 37       	cpi	r24, 0x74	; 116
    3f2c:	b1 f4       	brne	.+44     	; 0x3f5a <main+0x15a>
      // READ PAGE - we only read flash

      getch();			/* getlen */
    3f2e:	2e d0       	rcall	.+92     	; 0x3f8c <getch>
      length = getch();
    3f30:	2d d0       	rcall	.+90     	; 0x3f8c <getch>
    3f32:	c8 2e       	mov	r12, r24
      getch();
    3f34:	2b d0       	rcall	.+86     	; 0x3f8c <getch>

      verifySpace();
    3f36:	3f d0       	rcall	.+126    	; 0x3fb6 <verifySpace>
    3f38:	f7 01       	movw	r30, r14
    3f3a:	dc 2c       	mov	r13, r12
        putch(result);
        address++;
      }
      while (--length);
#else
      do putch(pgm_read_byte_near(address++));
    3f3c:	8f 01       	movw	r16, r30
    3f3e:	0f 5f       	subi	r16, 0xFF	; 255
    3f40:	1f 4f       	sbci	r17, 0xFF	; 255
    3f42:	84 91       	lpm	r24, Z+
    3f44:	1b d0       	rcall	.+54     	; 0x3f7c <putch>
      while (--length);
    3f46:	da 94       	dec	r13
    3f48:	f8 01       	movw	r30, r16
    3f4a:	c1 f7       	brne	.-16     	; 0x3f3c <main+0x13c>
register uint8_t timOverflCnt __asm__("r15"); // the number of timer1 overflows
#endif


/* main program starts here */
int main(void) {
    3f4c:	08 94       	sec
    3f4e:	e1 1c       	adc	r14, r1
    3f50:	f1 1c       	adc	r15, r1
    3f52:	ca 94       	dec	r12
    3f54:	ec 0c       	add	r14, r12
    3f56:	f1 1c       	adc	r15, r1
    3f58:	0e c0       	rjmp	.+28     	; 0x3f76 <main+0x176>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f5a:	85 37       	cpi	r24, 0x75	; 117
    3f5c:	39 f4       	brne	.+14     	; 0x3f6c <main+0x16c>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f5e:	2b d0       	rcall	.+86     	; 0x3fb6 <verifySpace>
      putch(SIGNATURE_0);
    3f60:	8e e1       	ldi	r24, 0x1E	; 30
    3f62:	0c d0       	rcall	.+24     	; 0x3f7c <putch>
      putch(SIGNATURE_1);
    3f64:	84 e9       	ldi	r24, 0x94	; 148
    3f66:	0a d0       	rcall	.+20     	; 0x3f7c <putch>
      putch(SIGNATURE_2);
    3f68:	86 e0       	ldi	r24, 0x06	; 6
    3f6a:	99 cf       	rjmp	.-206    	; 0x3e9e <main+0x9e>
    }
    else if (ch == 'Q') {
    3f6c:	81 35       	cpi	r24, 0x51	; 81
    3f6e:	11 f4       	brne	.+4      	; 0x3f74 <main+0x174>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f70:	88 e0       	ldi	r24, 0x08	; 8
    3f72:	14 d0       	rcall	.+40     	; 0x3f9c <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f74:	20 d0       	rcall	.+64     	; 0x3fb6 <verifySpace>
    }
    putch(STK_OK);
    3f76:	80 e1       	ldi	r24, 0x10	; 16
    3f78:	01 d0       	rcall	.+2      	; 0x3f7c <putch>
    3f7a:	6e cf       	rjmp	.-292    	; 0x3e58 <main+0x58>

00003f7c <putch>:
  }
}

void putch(char ch) {
    3f7c:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    3f7e:	80 91 c0 00 	lds	r24, 0x00C0
    3f82:	85 ff       	sbrs	r24, 5
    3f84:	fc cf       	rjmp	.-8      	; 0x3f7e <putch+0x2>
  UDR0 = ch;
    3f86:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    3f8a:	08 95       	ret

00003f8c <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f8c:	a8 95       	wdr
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    3f8e:	80 91 c0 00 	lds	r24, 0x00C0
    3f92:	87 ff       	sbrs	r24, 7
    3f94:	fc cf       	rjmp	.-8      	; 0x3f8e <getch+0x2>
#if defined(BLUECONTROLLER) 
    extendWatchdogPeriodAfterStartup();
#endif
  }

  ch = UDR0;
    3f96:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3f9a:	08 95       	ret

00003f9c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3f9c:	e0 e6       	ldi	r30, 0x60	; 96
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	98 e1       	ldi	r25, 0x18	; 24
    3fa2:	90 83       	st	Z, r25
  WDTCSR = x;
    3fa4:	80 83       	st	Z, r24
}
    3fa6:	08 95       	ret

00003fa8 <appStart>:
  }
}
#endif

void appStart() {
  LED_DDR |= _BV(LED); // switch LED to output
    3fa8:	25 9a       	sbi	0x04, 5	; 4
  LED_PORT &= ~_BV(LED); // switch LED off
    3faa:	2d 98       	cbi	0x05, 5	; 5
  watchdogConfig(WATCHDOG_OFF);
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	f6 df       	rcall	.-20     	; 0x3f9c <watchdogConfig>
  __asm__ __volatile__ (
    3fb0:	ee 27       	eor	r30, r30
    3fb2:	ff 27       	eor	r31, r31
    3fb4:	09 94       	ijmp

00003fb6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() == CRC_EOP)
    3fb6:	ea df       	rcall	.-44     	; 0x3f8c <getch>
    3fb8:	80 32       	cpi	r24, 0x20	; 32
    3fba:	11 f4       	brne	.+4      	; 0x3fc0 <verifySpace+0xa>
  {
    putch(STK_INSYNC);
    3fbc:	84 e1       	ldi	r24, 0x14	; 20
    3fbe:	de cf       	rjmp	.-68     	; 0x3f7c <putch>
#if defined(BLUECONTROLLER) 
    // ignore error when not synced, otherwise some initial garbage will exit the bootloader
    if(blueCAvrdudeSynced)
      appStart();
#else
    appStart();
    3fc0:	f3 cf       	rjmp	.-26     	; 0x3fa8 <appStart>

00003fc2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fc2:	1f 93       	push	r17
    3fc4:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    3fc6:	e2 df       	rcall	.-60     	; 0x3f8c <getch>
    3fc8:	11 50       	subi	r17, 0x01	; 1
    3fca:	e9 f7       	brne	.-6      	; 0x3fc6 <getNch+0x4>
  verifySpace();
    3fcc:	f4 df       	rcall	.-24     	; 0x3fb6 <verifySpace>
}
    3fce:	1f 91       	pop	r17
    3fd0:	08 95       	ret
